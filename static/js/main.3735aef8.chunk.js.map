{"version":3,"sources":["common/utils/calculateShipCoords/calculateShipCoords.js","common/utils/checkIfShipIsNotSurroundedByAnotherShip/checkIfShipIsNotSurroundedByAnotherShip.js","common/utils/checkIfStartIndexShipCoordsDirectionIsNotOutOfBounds/checkIfStartIndexShipCoordsDirectionIsNotOutOfBounds.js","common/utils/createGameboard/createGameboard.js","common/utils/generateRandomShipPosition/generateRandomShipPosition.js","common/utils/getFirstDigitOfNumber/getFirstDigitOfNumber.js","common/utils/getRandomArrayValue/getRandomArrayValue.js","common/utils/getRandomIndexFromArray/getRandomIndexFromArray.js","common/utils/isEmptyGameboardCell/isEmptyGameboardCell.js","common/utils/isValidShipPosition/isValidShipPosition.js","common/utils/sortArrayOfObjectsBasedOnAKeyValueByOrder/sortArrayOfObjectsBasedOnAKeyValueByOrder.js","common/utils/createRandomGameboard/createRandomGameboard.js","common/utils/generateRandomValidShipPosition/generateRandomValidShipPosition.js","common/utils/getArrayIndexValuesOfEmptyGameboardValuesAndHiddenShips/getArrayIndexValuesOfEmptyGameboardValuesAndHiddenShips.js","common/utils/getGeneratedRandomGameboardPlayerInitialStates/getGeneratedRandomGameboardPlayerInitialStates.js","common/utils/isShipOrEmptyGameboardValue/isShipOrEmptyGameboardValue.js","common/utils/addFreeMissGameboardValueCellsAroundCellDiagonally/addFreeMissGameboardValueCellsAroundCellDiagonally.js","common/utils/addFreeMissGameboardValueCellsAroundSunkenShip/addFreeMissGameboardValueCellsAroundSunkenShip.js","common/utils/getAllIndexesOfAnArrayValue/getAllIndexesOfAnArrayValue.js","common/utils/getArrayOfArrayOfObjectsKeyValues/getArrayOfArrayOfObjectsKeyValues.js","common/utils/getGameboardAfterHitLogic/getGameboardAfterHitLogic.js","common/utils/getGameboardAfterMissLogic/getGameboardAfterMissLogic.js","common/utils/isAllShipsSunken/isAllShipsSunken.js","common/utils/isHiddenShipGameboardCell/isHiddenShipGameboardCell.js","common/utils/isSunkenShip/isSunkenShip.js","common/utils/isSunkenShipAfterHit/isSunkenShipAfterHit.js","common/utils/isValidPlayerTurn/isValidPlayerTurn.js","features/game/gameSlice.js","features/game/components/GameboardPlayerGrid/GameboardPlayerGrid.js","features/game/components/GameboardShipStatsTitle/GameboardShipStatsTitle.js","features/game/components/GameboardPlayerGridTitle/GameboardPlayerGridTitle.js","common/utils/getPlayerName/getPlayerName.js","features/game/components/GameboardShipStats/GameboardShipStats.js","common/utils/addKeyValuePairToAllObjectsInArray/addKeyValuePairToAllObjectsInArray.js","common/utils/sortArrayByOrder/sortArrayByOrder.js","common/utils/getArrayWithUniqueObjectKeyValuesFromArrayWithObjects/getArrayWithUniqueObjectKeyValuesFromArrayWithObjects.js","common/utils/sortArrayOfObjectsBasedOnTwoKeyValuesByOrder/sortArrayOfObjectsBasedOnTwoKeyValuesByOrder.js","common/utils/getArrayWithUpdatedObjectsIsSunkenPropertyValue/getArrayWithUpdatedObjectsIsSunkenPropertyValue.js","common/components/Button/Button.js","features/game/components/GameButtons/GameButtons.js","features/game/components/GameboardsWrapper/GameboardsWrapper.js","common/components/ButtonsWrapper/ButtonsWrapper.js","common/components/Modal/Modal.js","common/components/ModalMessage/ModalMessage.js","common/utils/capitalizeString/capitalizeString.js","common/utils/getLastDigitOfNumber/getLastDigitOfNumber.js","common/utils/getLastIdInRowTwoDimensionalArray/getLastIdInRowTwoDimensionalArray.js","common/utils/getRowNumberOfIndexTwoDimensionalArray/getRowNumberOfIndexTwoDimensionalArray.js","features/game/components/GameButtonsShipPlacement/GameButtonsShipPlacement.js","features/game/components/GameboardPlayerGridShipPlacement/GameboardPlayerGridShipPlacement.js","common/utils/replaceAllSpecificArrayValuesWithNewValue/replaceAllSpecificArrayValuesWithNewValue.js","common/utils/getValidStartIdShipNotOutOfBounds/getValidStartIdShipNotOutOfBounds.js","common/utils/getArrayWithArrayOfIndexValuesReplacedByNewValue/getArrayWithArrayOfIndexValuesReplacedByNewValue.js","common/utils/getToggleValue/getToggleValue.js","features/game/components/GameLogicModals/GameLogicModals.js","features/game/Game.js","common/utils/isValidComputerTurn/isValidComputerTurn.js","common/utils/getPreviousHitDirectionNotSunkenShip/getPreviousHitDirectionNotSunkenShip.js","common/utils/getAvailableRandomGameboardComputerCellNumber/getAvailableRandomGameboardComputerCellNumber.js","common/utils/getAvailableNextSmartComputerMovesAfterHit/getAvailableNextSmartComputerMovesAfterHit.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["calculateShipCoords","shipLength","startIndex","direction","horizontalDirectionValue","verticalDirectionValue","randomShipCoords","i","push","checkIfShipIsNotSurroundedByAnotherShip","gameboard","shipCoordsArray","emptyGameboardValue","shipCoord","indexOf","checkIfStartIndexShipCoordsDirectionIsNotOutOfBounds","ship","shipLengthPropertyText","getFirstDigitOfNumber","createGameboard","amountRows","amountColumns","defaultValue","gameboardState","generateRandomShipPosition","randomGameboard","getRandomIndexFromArray","getRandomArrayValue","shipCoords","inputNumber","toString","slice","array","Math","floor","random","length","isEmptyGameboardCell","index","isValidShipPosition","sortArrayOfObjectsBasedOnAKeyValueByOrder","key","order","sortedArrayOfObjectsBasedOnAKeyValueByOrder","copyArray","sort","one","other","createRandomGameboard","generateRandomValidShipPosition","ships","shipNamePropertyText","callback","sortedShipsLengthDescendingOrder","randomValidShipPosition","maxAmountTimesTriedToPlaceShip","randomShipPosition","timesTriedToPlaceShip","getArrayIndexValuesOfEmptyGameboardValuesAndHiddenShips","hitGameboardValue","missGameboardValue","freemissGameboardValue","arrayIndexValuesOfEmptyGameboardValuesAndHiddenShips","keys","getGeneratedRandomGameboardPlayerInitialStates","amountOfRows","amountOfColumns","generatedRandomGameboardPlayerOneInitialState","generatedRandomGameboardPlayerTwoInitialState","isShipOrEmptyGameboardValue","addFreeMissGameboardValueCellsAroundCellDiagonally","addFreeMissGameboardValueCellsAroundSunkenShip","getAllIndexesOfAnArrayValue","value","allIndexes","forEach","item","getArrayOfArrayOfObjectsKeyValues","newArray","obj","undefined","getGameboardAfterHitLogic","isSunkenShip","gameboardInitialState","newState","shipName","newStateWithFreeMissCells","getGameboardAfterMissLogic","newGameboardStateWithMissCell","isAllShipsSunken","includes","isHiddenShipGameboardCell","id","arrayOfShipNames","isSunkenShipAfterHit","copyGameboard","isValidPlayerTurn","isPlayerTurn","isGameStarted","isGameOver","disablePlayerMove","isPlayerOneTurn","isPlayerTwoComputer","gameSlice","createSlice","name","initialState","buttonNextStepText","computerHitTurnAgainCount","computerHitTurnAgainCountDefaultValue","computerName","computerWonGame","gameboardPlayerOne","gameboardPlayerOneInitialState","gameboardPlayerTwo","gameboardPlayerTwoInitialState","playerOneName","playerOneWonGame","playerTwoName","playerTwoWonGame","previousHitComputerCellsNotSunkenShip","previousHitComputerCellsNotSunkenShipDefaultValue","previousHitDirectionNotSunkenShip","previousHitDirectionNotSunkenShipDefaultValue","previousHitDirectionNotSunkenShipHorizontalValue","previousHitDirectionNotSunkenShipVerticalValue","shipIsSunkenPropertyText","showGameboards","showModalGameOver","showModalGameSwitchTurnToPlayerOne","showModalGameSwitchTurnToPlayerTwo","showModalPickOpponent","showModalPreGameGameboardPlayerOneGridShipPlacement","showModalPreGameGameboardPlayerOneGridShipPlacementAgainstComputer","showModalPreGameGameboardPlayerTwoGridShipPlacement","showModalPreGamePlayerOneName","showModalPreGamePlayerOneNameAgainstComputer","showModalPreGamePlayerTwoName","showModalPreGameSwitchTurnToPlayerOne","showModalPreGameSwitchTurnToPlayerOneGameboard","showModalPreGameSwitchTurnToPlayerTwoGameboard","reducers","updatePlayerOneName","state","action","payload","updatePlayerTwoName","updateIsPlayerOneTurn","resetComputerHitTurnAgainCount","incrementComputerHitTurnAgainCount","updateIsGameStarted","updateIsGameOver","updatePlayerOneWonGame","updatePlayerTwoWonGame","updateComputerWonGame","updateIsPlayerTwoComputer","updateGameboardPlayerOneInitialState","updateGameboardPlayerTwoInitialState","updateGameboardPlayerOne","updateGameboardPlayerTwo","updatePreviousHitComputerCellsNotSunkenShip","updatePreviousHitDirectionNotSunkenShip","updateShowGameboards","updateShowModalGameOver","updateShowModalPickOpponent","updateShowModalGameSwitchTurnToPlayerTwo","updateShowModalGameSwitchTurnToPlayerOne","updateDisablePlayerMove","handleIsGameOver","computerWon","handleStartGame","handleButtonNewGame","handleGameSwitchPlayerTurn","handleNewGame","handleNewGameAgainstComputerWithRandomGameboardInitialStates","caseReducers","updateShowModalPreGamePlayerOneNameAgainstComputer","updateShowModalPreGameGameboardPlayerOneGridShipPlacementAgainstComputer","updateShowModalPreGamePlayerOneName","updateShowModalPreGamePlayerTwoName","updateShowModalPreGameSwitchTurnToPlayerOneGameboard","updateShowModalPreGameGameboardPlayerOneGridShipPlacement","updateShowModalPreGameSwitchTurnToPlayerTwoGameboard","updateShowModalPreGameGameboardPlayerTwoGridShipPlacement","updateShowModalPreGameSwitchTurnToPlayerOne","handleModalPickOpponentComputer","handleModalPreGamePlayerOneNameAgainstComputer","handleModalPickOpponentPlayer","handleModalPreGamePlayerOneName","handleModalPreGamePlayerTwoName","handleModalPreGameSwitchToPlayerOneGameboard","handleModalPreGameSwitchTurnToPlayerTwo","handleModalPreGameSwitchTurnToPlayerOne","handleModalGameSwitchTurnToPlayerTwo","handleModalGameSwitchTurnToPlayerOne","handleMove","createAsyncThunk","a","dispatch","getState","game","isComputer","newGameboardStateAfterHitLogicWithFreeMissCells","copyPreviousHitComputerCellNumbersInfo","newGameboardStateAfterMissLogicWithMissCell","setTimeout","handlePlayerMove","gameboardPlayer","actions","selectAmountOfColumns","selectAmountOfRows","selectButtonNextStepText","selectComputerHitTurnAgainCount","selectComputerName","selectComputerWonGame","selectDisablePlayerMove","selectEmptyGameboardValue","selectFreemissGameboardValue","selectGameboardPlayerOne","selectGameboardPlayerOneInitialState","selectGameboardPlayerTwo","selectGameboardPlayerTwoInitialState","selectHitGameboardValue","selectHorizontalDirectionValue","selectIsGameOver","selectIsGameStarted","selectIsPlayerOneTurn","selectIsPlayerTwoComputer","selectMissGameboardValue","selectPlayerOneName","selectPlayerOneWonGame","selectPlayerTwoName","selectPlayerTwoWonGame","selectPreviousHitComputerCellsNotSunkenShip","selectPreviousHitDirectionNotSunkenShip","selectPreviousHitDirectionNotSunkenShipHorizontalValue","selectPreviousHitDirectionNotSunkenShipVerticalValue","selectShipIsSunkenPropertyText","selectShipLengthPropertyText","selectShipNamePropertyText","selectShips","selectShowGameboards","selectShowModalGameOver","selectShowModalGameSwitchTurnToPlayerOne","selectShowModalGameSwitchTurnToPlayerTwo","selectShowModalPickOpponent","selectShowModalPreGameGameboardPlayerOneGridShipPlacement","selectShowModalPreGameGameboardPlayerOneGridShipPlacementAgainstComputer","selectShowModalPreGameGameboardPlayerTwoGridShipPlacement","selectShowModalPreGamePlayerOneName","selectShowModalPreGamePlayerOneNameAgainstComputer","selectShowModalPreGamePlayerTwoName","selectShowModalPreGameSwitchTurnToPlayerOne","selectShowModalPreGameSwitchTurnToPlayerOneGameboard","selectShowModalPreGameSwitchTurnToPlayerTwoGameboard","selectVerticalDirectionValue","GameboardPlayerGrid","isPlayerOne","useDispatch","useSelector","getGameboardPlayer","getIsPlayerTurn","className","style","gridTemplateColumns","gridTemplateRows","map","cell","onClick","event","onGameboardCellClicked","target","GameboardShipStatsTitle","shipStatsTitle","GameboardPlayerGridTitle","playerName","getPlayerName","GameboardShipStats","sortedArrayWithUniqueShipLengthValuesDescendingOrder","sortedArrayByOrder","b","sortArrayByOrder","arrayWithObjectKeyValues","Set","getArrayWithUniqueObjectKeyValuesFromArrayWithObjects","sortedArrayOfShipObjectsBasedOnPropertiesShipLengthAndIsSunken","keyOne","keyTwo","keyOneOrder","keyTwoOrder","sortedArrayOfObjectsBasedOnTwoKeyValuesByOrder","sortArrayOfObjectsBasedOnTwoKeyValuesByOrder","isSunkenKeyValue","shipNameValue","getArrayWithUpdatedObjectsIsSunkenPropertyValue","shipLengthNumber","Array","Button","buttonOnClick","children","disableButton","useState","isButtonTouchStart","setIsButtonTouchStart","disabled","onTouchStart","onTouchEnd","GameButtons","GameboardsWrapper","opponentShipStatsTitle","yourShipStatsTitle","ButtonsWrapper","Modal","closeModal","ModalMessage","capitalizeString","string","toUpperCase","getLastDigitOfNumber","number","getLastIdInRowTwoDimensionalArray","rowNumber","lastColumnNumberOfRow","Number","getRowNumberOfIndexTwoDimensionalArray","GameButtonsShipPlacement","currentIndexShipToBePlaced","isAllShipsPlaced","randomizeGameboardPlayerShipPlacement","resetGameboardPlayerShipPlacement","shipPlacementDirection","toggleShipPlacementDirection","undoLastShipPlacement","GameboardPlayerGridShipPlacement","gameboardPlayerShipPlacementInitialState","gameboardPlayerShipPlacement","setGameboardPlayerShipPlacement","setShipPlacementdirection","setCurrentIndexShipToBePlaced","setIsAllShipsPlaced","hoveredIds","setHoveredIds","useMemo","useEffect","window","scrollTo","top","document","body","scrollHeight","left","behavior","removeLastShipPlacementFromGameboard","removedLastShipPlacementFromGameboard","newValue","replaceAllSpecificArrayValuesWithNewValue","getAValidStartIdShipNotOutOfBounds","currentShip","lengthOfShip","columnNumber","getValidStartIdShipNotOutOfBounds","isAValidShipPlacement","handleShipPlacementOnGameboard","validStartIdShipNotOutOfBounds","shipCoordsShipPlacement","gameboardPlayerShipPlacementWithPlacedShip","arrayIndexValues","getArrayWithArrayOfIndexValuesReplacedByNewValue","handleOnMouseLeave","isShipPlacementFinished","currentValue","value1","value2","toggledShipPlacementDirectionValue","onMouseLeave","onMouseEnter","handleOnMouseEnter","GameLogicModals","generatedRandomGameboardInitialStates","htmlFor","type","onChange","e","onKeyUp","autoFocus","Game","useLayoutEffect","isValidComputerTurn","computerTurnTimeout","handleComputerMove","clearTimeout","previousHitDirectionNotSunkenShipValue","copyHitComputerCellNumbersSortedAscending","getPreviousHitDirectionNotSunkenShip","randomGameboardComputerCellNumber","gameboardComputer","gameboardComputerCellsAvailable","getAvailableRandomGameboardComputerCellNumber","availableNextSmartComputerMovesAfterHit","copyGameboardComputer","availableNextSmartComputerMoves","indexesTop","indexesLeft","indexesRight","indexesBottom","min","indexMin","indexMax","max","sortedAvailableNextSmartComputerMoves","getAvailableNextSmartComputerMovesAfterHit","smartComputerMoveIndex","App","store","configureStore","reducer","gameReducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3735aef8.chunk.js","sourcesContent":["export const calculateShipCoords = (shipLength, startIndex, direction, horizontalDirectionValue, verticalDirectionValue) => {\n  let randomShipCoords = [];\n  if (direction === horizontalDirectionValue) {\n    for (let i = 0; i < shipLength; i++) {\n      randomShipCoords.push(startIndex + i);\n    }\n  } else if (direction === verticalDirectionValue) {\n    for (let i = 0; i < shipLength; i++) {\n      randomShipCoords.push(startIndex + i*10);\n    }\n  }\n  return randomShipCoords;\n}\n","export const checkIfShipIsNotSurroundedByAnotherShip = (gameboard, shipCoordsArray, emptyGameboardValue) => {\n  for (const shipCoord of shipCoordsArray) {\n    if ((shipCoord >= 0 && shipCoord <= 9)) {\n      if (gameboard[shipCoord + 10] !== emptyGameboardValue) {\n        return false;\n      }\n      if (shipCoord > 0) {\n        if (gameboard[shipCoord + 9] !== emptyGameboardValue) {\n          return false;\n        }\n        if (gameboard[shipCoord - 1] !== emptyGameboardValue) {\n          return false;\n        }\n      }\n      if (shipCoord < 9) {\n        if (gameboard[shipCoord + 1] !== emptyGameboardValue) {\n          return false;\n        }\n        if (gameboard[shipCoord + 11] !== emptyGameboardValue) {\n          return false;\n        }\n      }\n    }\n    if (shipCoord >= 90 && shipCoord <= 99) {\n      if (gameboard[shipCoord - 10] !== emptyGameboardValue) {\n        return false;\n      }\n      if (shipCoord > 90) {\n        if (gameboard[shipCoord - 1] !== emptyGameboardValue) {\n          return false;\n        }\n        if (gameboard[shipCoord - 11] !== emptyGameboardValue) {\n          return false;\n        }\n      }\n      if (shipCoord < 99) {\n        if (gameboard[shipCoord + 1] !== emptyGameboardValue) {\n          return false;\n        }\n        if (gameboard[shipCoord - 9] !== emptyGameboardValue) {\n          return false;\n        }\n      }\n    }\n    if (([0, 10, 20, 30, 40, 50, 60, 70, 80, 90].indexOf(shipCoord) > -1)) {\n      if (gameboard[shipCoord + 1] !== emptyGameboardValue) {\n        return false;\n      }\n      if (shipCoord > 0) {\n        if (gameboard[shipCoord - 9] !== emptyGameboardValue) {\n          return false;\n        }\n        if (gameboard[shipCoord - 10] !== emptyGameboardValue) {\n          return false;\n        }\n      }\n      if (shipCoord < 90) {\n        if (gameboard[shipCoord + 10] !== emptyGameboardValue) {\n          return false;\n        }\n        if (gameboard[shipCoord + 11] !== emptyGameboardValue) {\n          return false;\n        }\n      }\n    }\n    if (([9, 19, 29, 39, 49, 59, 69, 79, 89, 99].indexOf(shipCoord) > -1)) {\n      if (gameboard[shipCoord - 1] !== emptyGameboardValue) {\n        return false;\n      }\n      if (shipCoord > 9) {\n        if (gameboard[shipCoord - 10] !== emptyGameboardValue) {\n          return false;\n        }\n        if (gameboard[shipCoord - 11] !== emptyGameboardValue) {\n          return false;\n        }\n      }\n      if (shipCoord < 99) {\n        if (gameboard[shipCoord + 9] !== emptyGameboardValue) {\n          return false;\n        }\n        if (gameboard[shipCoord + 10] !== emptyGameboardValue) {\n          return false;\n        }\n      }\n    }\n    if(!([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 30, 40, 50, 60, 70, 80, 90, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 19, 29, 39, 49, 59, 69, 79, 89, 99].indexOf(shipCoord) > -1)) {\n      if (gameboard[shipCoord + 1] !== emptyGameboardValue) {\n        return false;\n      }\n      if (gameboard[shipCoord - 1] !== emptyGameboardValue) {\n        return false;\n      }\n      if (gameboard[shipCoord + 10] !== emptyGameboardValue) {\n        return false;\n      }\n      if (gameboard[shipCoord - 10] !== emptyGameboardValue) {\n        return false;\n      }\n      if (gameboard[shipCoord - 11] !== emptyGameboardValue) {\n        return false;\n      }\n      if (gameboard[shipCoord - 9] !== emptyGameboardValue) {\n        return false;\n      }\n      if (gameboard[shipCoord + 9] !== emptyGameboardValue) {\n        return false;\n      }\n      if (gameboard[shipCoord + 11] !== emptyGameboardValue) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n  \n};\n","export const checkIfStartIndexShipCoordsDirectionIsNotOutOfBounds = (startIndex, ship, direction, horizontalDirectionValue, verticalDirectionValue, shipLengthPropertyText, getFirstDigitOfNumber) => {\n  if (direction === horizontalDirectionValue) {\n    const lastDigitOfstartIndex = startIndex % 10;\n    if (lastDigitOfstartIndex + (ship[shipLengthPropertyText] - 1) <= 9) {\n      return true;\n    }\n    return false;\n  }\n\n  if (direction === verticalDirectionValue) {\n    let firstDigitOfStartIndex;\n    if (startIndex < 10) {\n      firstDigitOfStartIndex = 0;\n    } else {\n      firstDigitOfStartIndex = getFirstDigitOfNumber(startIndex)\n    }\n    if (firstDigitOfStartIndex + (ship[shipLengthPropertyText] - 1) <= 9) {\n      return true;\n    }\n    return false;\n  }\n\n  return false;\n\n};\n","export const createGameboard = (amountRows, amountColumns, defaultValue) => {\n  let gameboardState = [];\n  // create an one dimensional array with a default value\n  for (let i=0; i < amountRows*amountColumns; i++) {\n    gameboardState.push(defaultValue);\n  };\n  \n  return gameboardState;\n};\n","export const generateRandomShipPosition = (randomGameboard, ship, horizontalDirectionValue, verticalDirectionValue, shipLengthPropertyText, getRandomIndexFromArray, getRandomArrayValue, calculateShipCoords) => {\n  const startIndex = getRandomIndexFromArray(randomGameboard);\n  const direction = getRandomArrayValue([horizontalDirectionValue, verticalDirectionValue]);\n  const shipCoords = calculateShipCoords(ship[shipLengthPropertyText], startIndex, direction, horizontalDirectionValue, verticalDirectionValue);\n  return ({\n    startIndex,\n    direction,\n    shipCoords\n  });\n}\n","export const getFirstDigitOfNumber = (inputNumber) => {\n  const strInputNumber = inputNumber.toString();\n  const strFirstDigitOfNumber = strInputNumber.slice(0, 1);\n  const numberFirstDigitOfNumber = +strFirstDigitOfNumber;\n  return numberFirstDigitOfNumber;\n}\n","export const getRandomArrayValue = (array) => {\n  let randomArrayIndex = Math.floor(Math.random() * array.length);\n  return array[randomArrayIndex];\n}\n","export const getRandomIndexFromArray = (array) => {\n  let randomIndexFromArray = Math.floor(Math.random() * array.length);\n  return randomIndexFromArray;\n}\n","export const isEmptyGameboardCell = (array, index, emptyGameboardValue) => {\n  if (array[index] === emptyGameboardValue) {\n    return true;\n  }\n  return false;\n}\n","export const isValidShipPosition = (\n  isEmptyGameboardCell,\n  checkIfStartIndexShipCoordsDirectionIsNotOutOfBounds, \n  checkIfShipIsNotSurroundedByAnotherShip\n) => {\n  if (\n       isEmptyGameboardCell\n    && checkIfStartIndexShipCoordsDirectionIsNotOutOfBounds\n    && checkIfShipIsNotSurroundedByAnotherShip\n  ) {\n    return true;\n  }\n  return false;\n}\n","export const sortArrayOfObjectsBasedOnAKeyValueByOrder = (array, key, order) => {\n  const copyArray = [...array];\n  let sortedArrayOfObjectsBasedOnAKeyValueByOrder;\n  if (order === \"ascending\") {\n    sortedArrayOfObjectsBasedOnAKeyValueByOrder = copyArray.sort((one, other) => {\n      return (one[key] - other[key]);\n    });\n  } else if (order === \"descending\") {\n    sortedArrayOfObjectsBasedOnAKeyValueByOrder = copyArray.sort((one, other) => {\n      return (other[key] - one[key]);\n    });\n  };\n\n  return sortedArrayOfObjectsBasedOnAKeyValueByOrder;\n};\n","import { calculateShipCoords } from '../calculateShipCoords/calculateShipCoords';\nimport { checkIfShipIsNotSurroundedByAnotherShip } from '../checkIfShipIsNotSurroundedByAnotherShip/checkIfShipIsNotSurroundedByAnotherShip';\nimport { checkIfStartIndexShipCoordsDirectionIsNotOutOfBounds } from '../checkIfStartIndexShipCoordsDirectionIsNotOutOfBounds/checkIfStartIndexShipCoordsDirectionIsNotOutOfBounds';\nimport { createGameboard } from '../createGameboard/createGameboard';\nimport { generateRandomShipPosition } from '../generateRandomShipPosition/generateRandomShipPosition';\nimport { getFirstDigitOfNumber } from '../getFirstDigitOfNumber/getFirstDigitOfNumber';\nimport { getRandomArrayValue } from '../getRandomArrayValue/getRandomArrayValue';\nimport { getRandomIndexFromArray } from '../getRandomIndexFromArray/getRandomIndexFromArray';\nimport { isEmptyGameboardCell } from '../isEmptyGameboardCell/isEmptyGameboardCell';\nimport { isValidShipPosition } from '../isValidShipPosition/isValidShipPosition';\nimport { sortArrayOfObjectsBasedOnAKeyValueByOrder } from '../sortArrayOfObjectsBasedOnAKeyValueByOrder/sortArrayOfObjectsBasedOnAKeyValueByOrder';\n\nexport const createRandomGameboard = (amountRows, amountColumns, emptyGameboardValue, generateRandomValidShipPosition, ships, horizontalDirectionValue, verticalDirectionValue, shipNamePropertyText, shipLengthPropertyText, callback) => {\n  const randomGameboard = createGameboard(amountRows, amountColumns, emptyGameboardValue);\n  const maxAmountTimesTriedToPlaceShip = 25;\n  const sortedShipsLengthDescendingOrder = sortArrayOfObjectsBasedOnAKeyValueByOrder(ships, shipLengthPropertyText, \"descending\");\n\n  for (const ship of sortedShipsLengthDescendingOrder) {\n    const randomValidShipPosition = generateRandomValidShipPosition(\n      generateRandomShipPosition,\n      randomGameboard, \n      ship, \n      horizontalDirectionValue, \n      verticalDirectionValue, \n      getRandomIndexFromArray, \n      getRandomArrayValue, \n      calculateShipCoords,\n      isValidShipPosition,\n      isEmptyGameboardCell,\n      emptyGameboardValue,\n      checkIfStartIndexShipCoordsDirectionIsNotOutOfBounds,\n      getFirstDigitOfNumber,\n      checkIfShipIsNotSurroundedByAnotherShip,\n      shipLengthPropertyText,\n      maxAmountTimesTriedToPlaceShip\n    );\n\n    // if it took too long to find a randomValidShipPosition for a specific ship restart ship placements again to prevent an infinite loop\n    if (!randomValidShipPosition) {\n      return callback(amountRows, amountColumns, emptyGameboardValue, generateRandomValidShipPosition, ships, horizontalDirectionValue, verticalDirectionValue, shipNamePropertyText, shipLengthPropertyText, callback);\n    }\n    \n    for (const coord of randomValidShipPosition.shipCoords) {\n      randomGameboard[coord] = ship[shipNamePropertyText];\n    }\n  }\n  return randomGameboard;\n}\n","export const generateRandomValidShipPosition = (\n  generateRandomShipPosition,\n  randomGameboard, \n  ship, \n  horizontalDirectionValue, \n  verticalDirectionValue, \n  getRandomIndexFromArray, \n  getRandomArrayValue, \n  calculateShipCoords,\n  isValidShipPosition,\n  isEmptyGameboardCell,\n  emptyGameboardValue,\n  checkIfStartIndexShipCoordsDirectionIsNotOutOfBounds,\n  getFirstDigitOfNumber,\n  checkIfShipIsNotSurroundedByAnotherShip,\n  shipLengthPropertyText,\n  maxAmountTimesTriedToPlaceShip\n) => {\n  let randomShipPosition = generateRandomShipPosition(randomGameboard, ship, horizontalDirectionValue, verticalDirectionValue, shipLengthPropertyText, getRandomIndexFromArray, getRandomArrayValue, calculateShipCoords);\n  let timesTriedToPlaceShip = 1;\n\n  while (!isValidShipPosition(\n    isEmptyGameboardCell(randomGameboard, randomShipPosition.startIndex, emptyGameboardValue),\n    checkIfStartIndexShipCoordsDirectionIsNotOutOfBounds(randomShipPosition.startIndex, ship, randomShipPosition.direction, horizontalDirectionValue, verticalDirectionValue, shipLengthPropertyText, getFirstDigitOfNumber),\n    checkIfShipIsNotSurroundedByAnotherShip(randomGameboard, randomShipPosition.shipCoords, emptyGameboardValue) \n  )) {\n    // return false if it takes too long to find a valid ship position, to prevent an infinite loop\n    if (timesTriedToPlaceShip >= maxAmountTimesTriedToPlaceShip) {\n      return false;\n    } else {\n      randomShipPosition = generateRandomShipPosition(randomGameboard, ship, horizontalDirectionValue, verticalDirectionValue, shipLengthPropertyText, getRandomIndexFromArray, getRandomArrayValue, calculateShipCoords);\n      timesTriedToPlaceShip += 1;\n    }\n  }\n  return randomShipPosition;\n}\n","export const getArrayIndexValuesOfEmptyGameboardValuesAndHiddenShips = (gameboard, hitGameboardValue, missGameboardValue, freemissGameboardValue) => {\n  let arrayIndexValuesOfEmptyGameboardValuesAndHiddenShips = [];\n  for (const index of gameboard.keys()) {\n    if (gameboard[index] !== hitGameboardValue && gameboard[index] !== missGameboardValue && gameboard[index] !== freemissGameboardValue) {\n      arrayIndexValuesOfEmptyGameboardValuesAndHiddenShips.push(index)\n    }\n  }\n  return arrayIndexValuesOfEmptyGameboardValuesAndHiddenShips;\n}\n","export const getGeneratedRandomGameboardPlayerInitialStates = (\n  createRandomGameboard, \n  amountOfRows, \n  amountOfColumns,\n  emptyGameboardValue,\n  generateRandomValidShipPosition,\n  ships,\n  horizontalDirectionValue,\n  verticalDirectionValue,\n  shipNamePropertyText,\n  shipLengthPropertyText\n) => {\n  const generatedRandomGameboardPlayerOneInitialState = createRandomGameboard(amountOfRows, amountOfColumns, emptyGameboardValue, generateRandomValidShipPosition, ships, horizontalDirectionValue, verticalDirectionValue, shipNamePropertyText, shipLengthPropertyText, createRandomGameboard);\n  const generatedRandomGameboardPlayerTwoInitialState = createRandomGameboard(amountOfRows, amountOfColumns, emptyGameboardValue, generateRandomValidShipPosition, ships, horizontalDirectionValue, verticalDirectionValue, shipNamePropertyText, shipLengthPropertyText, createRandomGameboard);\n  return ({\n    generatedRandomGameboardPlayerOneInitialState,\n    generatedRandomGameboardPlayerTwoInitialState\n  });\n};\n","export const isShipOrEmptyGameboardValue = (gameboard, index, hitGameboardValue, missGameboardValue, freemissGameboardValue) => {\n  if (!([hitGameboardValue, missGameboardValue, freemissGameboardValue].indexOf(gameboard[index]) > -1)) {\n    return true;\n  }\n  return false;\n};\n","export const addFreeMissGameboardValueCellsAroundCellDiagonally = (array, index, freemissGameboardValue, emptyGameboardValue) => {\n  let copyArray = [...array];\n  \n  if ((index >= 0 && index <= 9)) {\n    if (index > 0) {\n      if (copyArray[index + 9] === emptyGameboardValue) {\n        copyArray[index + 9] = freemissGameboardValue;\n      }\n    }\n    if (index < 9) {\n      if (copyArray[index + 11] === emptyGameboardValue) {\n        copyArray[index + 11] = freemissGameboardValue;\n      }\n    }\n  }\n\n  if (index >= 90 && index <= 99) {\n    if (index > 90) {\n      if (copyArray[index - 11] === emptyGameboardValue) {\n        copyArray[index - 11] = freemissGameboardValue;\n      }\n    }\n    if (index < 99) {\n      if (copyArray[index - 9] === emptyGameboardValue) {\n        copyArray[index - 9] = freemissGameboardValue;\n      }\n    }\n  }\n\n  if (([0, 10, 20, 30, 40, 50, 60, 70, 80, 90].indexOf(index) > -1)) {\n    if (index > 0) {\n      if (copyArray[index - 9] === emptyGameboardValue) {\n        copyArray[index - 9] = freemissGameboardValue;\n      }\n    }\n    if (index < 90) {\n      if (copyArray[index + 11] === emptyGameboardValue) {\n        copyArray[index + 11] = freemissGameboardValue;\n      }\n    }\n  }\n\n  if (([9, 19, 29, 39, 49, 59, 69, 79, 89, 99].indexOf(index) > -1)) {\n    if (index > 9) {\n      if (copyArray[index - 11] === emptyGameboardValue) {\n        copyArray[index - 11] = freemissGameboardValue;\n      }\n    }\n    if (index < 99) {\n      if (copyArray[index + 9] === emptyGameboardValue) {\n        copyArray[index + 9] = freemissGameboardValue;\n      }\n    }\n  }\n\n  if(!([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 30, 40, 50, 60, 70, 80, 90, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 19, 29, 39, 49, 59, 69, 79, 89, 99].indexOf(index) > -1)) {\n    if (copyArray[index - 11] === emptyGameboardValue) {\n      copyArray[index - 11] = freemissGameboardValue;\n    }\n    if (copyArray[index - 9] === emptyGameboardValue) {\n      copyArray[index - 9] = freemissGameboardValue;\n    }\n    if (copyArray[index + 9] === emptyGameboardValue) {\n      copyArray[index + 9] = freemissGameboardValue;\n    }\n    if (copyArray[index + 11] === emptyGameboardValue) {\n      copyArray[index + 11] = freemissGameboardValue;\n    }\n  }\n\n  return (\n    copyArray\n  );\n};\n","export const addFreeMissGameboardValueCellsAroundSunkenShip = (array, shipCoordsArray, freemissGameboardValue, emptyGameboardValue) => {\n  let copyArray = [...array];\n\n  for (const shipCoord of shipCoordsArray) {\n    if ((shipCoord >= 0 && shipCoord <= 9)) {\n      if (copyArray[shipCoord + 10] === emptyGameboardValue) {\n        copyArray[shipCoord + 10] = freemissGameboardValue;\n      }\n      if (shipCoord > 0) {\n        if (copyArray[shipCoord + 9] === emptyGameboardValue) {\n          copyArray[shipCoord + 9] = freemissGameboardValue;\n        }\n        if (copyArray[shipCoord - 1] === emptyGameboardValue) {\n          copyArray[shipCoord - 1] = freemissGameboardValue;\n        }\n      }\n      if (shipCoord < 9) {\n        if (copyArray[shipCoord + 1] === emptyGameboardValue) {\n          copyArray[shipCoord + 1] = freemissGameboardValue;\n        }\n        if (copyArray[shipCoord + 11] === emptyGameboardValue) {\n          copyArray[shipCoord + 11] = freemissGameboardValue;\n        }\n      }\n    }\n    if (shipCoord >= 90 && shipCoord <= 99) {\n      if (copyArray[shipCoord - 10] === emptyGameboardValue) {\n        copyArray[shipCoord - 10] = freemissGameboardValue;\n      }\n      if (shipCoord > 90) {\n        if (copyArray[shipCoord - 1] === emptyGameboardValue) {\n          copyArray[shipCoord - 1] = freemissGameboardValue;\n        }\n        if (copyArray[shipCoord - 11] === emptyGameboardValue) {\n          copyArray[shipCoord - 11] = freemissGameboardValue;\n        }\n      }\n      if (shipCoord < 99) {\n        if (copyArray[shipCoord + 1] === emptyGameboardValue) {\n          copyArray[shipCoord + 1] = freemissGameboardValue;\n        }\n        if (copyArray[shipCoord - 9] === emptyGameboardValue) {\n          copyArray[shipCoord - 9] = freemissGameboardValue;\n        }\n      }\n    }\n    if (([0, 10, 20, 30, 40, 50, 60, 70, 80, 90].indexOf(shipCoord) > -1)) {\n      if (copyArray[shipCoord + 1] === emptyGameboardValue) {\n        copyArray[shipCoord + 1] = freemissGameboardValue;\n      }\n      if (shipCoord > 0) {\n        if (copyArray[shipCoord - 9] === emptyGameboardValue) {\n          copyArray[shipCoord - 9] = freemissGameboardValue;\n        }\n        if (copyArray[shipCoord - 10] === emptyGameboardValue) {\n          copyArray[shipCoord - 10] = freemissGameboardValue;\n        }\n      }\n      if (shipCoord < 90) {\n        if (copyArray[shipCoord + 10] === emptyGameboardValue) {\n          copyArray[shipCoord + 10] = freemissGameboardValue;\n        }\n        if (copyArray[shipCoord + 11] === emptyGameboardValue) {\n          copyArray[shipCoord + 11] = freemissGameboardValue;\n        }\n      }\n    }\n    if (([9, 19, 29, 39, 49, 59, 69, 79, 89, 99].indexOf(shipCoord) > -1)) {\n      if (copyArray[shipCoord - 1] === emptyGameboardValue) {\n        copyArray[shipCoord - 1] = freemissGameboardValue;\n      }\n      if (shipCoord > 9) {\n        if (copyArray[shipCoord - 10] === emptyGameboardValue) {\n          copyArray[shipCoord - 10] = freemissGameboardValue;\n        }\n        if (copyArray[shipCoord - 11] === emptyGameboardValue) {\n          copyArray[shipCoord - 11] = freemissGameboardValue;\n        }\n      }\n      if (shipCoord < 99) {\n        if (copyArray[shipCoord + 9] === emptyGameboardValue) {\n          copyArray[shipCoord + 9] = freemissGameboardValue;\n        }\n        if (copyArray[shipCoord + 10] === emptyGameboardValue) {\n          copyArray[shipCoord + 10] = freemissGameboardValue;\n        }\n      }\n    }\n    if(!([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 30, 40, 50, 60, 70, 80, 90, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 19, 29, 39, 49, 59, 69, 79, 89, 99].indexOf(shipCoord) > -1)) {\n      if (copyArray[shipCoord + 1] === emptyGameboardValue) {\n        copyArray[shipCoord + 1] = freemissGameboardValue;\n      }\n      if (copyArray[shipCoord - 1] === emptyGameboardValue) {\n        copyArray[shipCoord - 1] = freemissGameboardValue;\n      }\n      if (copyArray[shipCoord + 10] === emptyGameboardValue) {\n        copyArray[shipCoord + 10] = freemissGameboardValue;\n      }\n      if (copyArray[shipCoord - 10] === emptyGameboardValue) {\n        copyArray[shipCoord - 10] = freemissGameboardValue;\n      }\n      if (copyArray[shipCoord - 11] === emptyGameboardValue) {\n        copyArray[shipCoord - 11] = freemissGameboardValue;\n      }\n      if (copyArray[shipCoord - 9] === emptyGameboardValue) {\n        copyArray[shipCoord - 9] = freemissGameboardValue;\n      }\n      if (copyArray[shipCoord + 9] === emptyGameboardValue) {\n        copyArray[shipCoord + 9] = freemissGameboardValue;\n      }\n      if (copyArray[shipCoord + 11] === emptyGameboardValue) {\n        copyArray[shipCoord + 11] = freemissGameboardValue;\n      }\n    }\n  }\n\n  return (\n    copyArray\n  );\n};\n","export const getAllIndexesOfAnArrayValue = (array, value) => {\n  let allIndexes = [];\n  array.forEach((item, i) => {\n    if (item === value) {\n      allIndexes.push(i);\n    }\n  });\n  return allIndexes;\n}\n","export const getArrayOfArrayOfObjectsKeyValues = (array, key) => {\n  let copyArray = [...array];\n  let newArray = [];\n  copyArray.forEach((obj) => {\n    if (obj[key] !== undefined) {\n      newArray.push(obj[key]);\n    }\n  })\n  return newArray;\n};\n","export const getGameboardAfterHitLogic = (\n  gameboard, \n  index, \n  hitGameboardValue, \n  isSunkenShip,\n  getAllIndexesOfAnArrayValue, \n  gameboardInitialState,\n  addFreeMissGameboardValueCellsAroundSunkenShip, \n  freemissGameboardValue, \n  emptyGameboardValue,\n  addFreeMissGameboardValueCellsAroundCellDiagonally\n) => {\n  let newState = [...gameboard];\n  const shipName = newState[index];\n  newState[index] = hitGameboardValue;\n  const isShipNameSunken = isSunkenShip(newState, shipName);\n  let newStateWithFreeMissCells = newState;\n  // add freemiss cell values around all the cells of a ship if they are empty and the ship is sunken\n  if (isShipNameSunken) {\n    const shipCoordsShipName = getAllIndexesOfAnArrayValue(gameboardInitialState, shipName);\n    newStateWithFreeMissCells = addFreeMissGameboardValueCellsAroundSunkenShip(newState, shipCoordsShipName, freemissGameboardValue, emptyGameboardValue);\n  } else {\n    // add diagonally freemiss cell values around a single hit cell if the cell is empty\n    newStateWithFreeMissCells = addFreeMissGameboardValueCellsAroundCellDiagonally(newState, index, freemissGameboardValue, emptyGameboardValue);\n  }\n  return newStateWithFreeMissCells;\n}\n","export const getGameboardAfterMissLogic = (gameboard, index, missGameboardValue) => {\n  let newGameboardStateWithMissCell = [...gameboard];\n  newGameboardStateWithMissCell[index] = missGameboardValue;\n  return newGameboardStateWithMissCell;\n}\n","export const isAllShipsSunken = (gameboard, ships, shipNamePropertyText) => {\n  for (const ship of ships) {\n    if (gameboard.includes(ship[shipNamePropertyText])) {\n      return false;\n    }\n  }\n  return true;\n};\n","export const isHiddenShipGameboardCell = (array, id, arrayOfShipNames) => {\n  if (arrayOfShipNames.includes(array[+id])) {\n    return true;\n  }\n  return false;\n}\n","export const isSunkenShip = (gameboard, shipName) => {\n  return !gameboard.includes(shipName);\n}\n","export const isSunkenShipAfterHit = (\n  gameboard,\n  index,\n  hitGameboardValue,\n  isSunkenShip\n) => {\n  let copyGameboard = [...gameboard];\n  const shipName = copyGameboard[index];\n  copyGameboard[index] = hitGameboardValue;\n  const isShipNameSunken = isSunkenShip(copyGameboard, shipName);\n  return isShipNameSunken;\n};\n","export const isValidPlayerTurn = (\n  gameboard, \n  id,\n  isPlayerTurn, \n  isGameStarted,\n  isGameOver,\n  emptyGameboardValue, \n  arrayOfShipNames,\n  disablePlayerMove,\n  isPlayerOneTurn,\n  isPlayerTwoComputer\n) => {\n  if (\n       isPlayerTurn \n    && isGameStarted\n    && !isGameOver\n    && (gameboard[+id] === emptyGameboardValue || arrayOfShipNames.includes(gameboard[+id]))\n    && !disablePlayerMove\n    && !(!isPlayerOneTurn && isPlayerTwoComputer)\n  ) {\n    return true;\n  }\n  return false;\n};\n","import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { addFreeMissGameboardValueCellsAroundCellDiagonally } from \"../../common/utils/addFreeMissGameboardValueCellsAroundCellDiagonally/addFreeMissGameboardValueCellsAroundCellDiagonally\";\nimport { addFreeMissGameboardValueCellsAroundSunkenShip } from \"../../common/utils/addFreeMissGameboardValueCellsAroundSunkenShip/addFreeMissGameboardValueCellsAroundSunkenShip\";\nimport { getAllIndexesOfAnArrayValue } from \"../../common/utils/getAllIndexesOfAnArrayValue/getAllIndexesOfAnArrayValue\";\nimport { getArrayOfArrayOfObjectsKeyValues } from \"../../common/utils/getArrayOfArrayOfObjectsKeyValues/getArrayOfArrayOfObjectsKeyValues\";\nimport { getGameboardAfterHitLogic } from \"../../common/utils/getGameboardAfterHitLogic/getGameboardAfterHitLogic\";\nimport { getGameboardAfterMissLogic } from \"../../common/utils/getGameboardAfterMissLogic/getGameboardAfterMissLogic\";\nimport { isAllShipsSunken } from \"../../common/utils/isAllShipsSunken/isAllShipsSunken\";\nimport { isEmptyGameboardCell } from \"../../common/utils/isEmptyGameboardCell/isEmptyGameboardCell\";\nimport { isHiddenShipGameboardCell } from \"../../common/utils/isHiddenShipGameboardCell/isHiddenShipGameboardCell\";\nimport { isSunkenShip } from \"../../common/utils/isSunkenShip/isSunkenShip\";\nimport { isSunkenShipAfterHit } from \"../../common/utils/isSunkenShipAfterHit/isSunkenShipAfterHit\";\nimport { isValidPlayerTurn } from \"../../common/utils/isValidPlayerTurn/isValidPlayerTurn\";\n\nconst initialState = {\n  amountOfColumns: 10,\n  amountOfRows: 10,\n  buttonNextStepText: \"Next\",\n  computerHitTurnAgainCount: 0,\n  computerHitTurnAgainCountDefaultValue: 0,\n  computerName: \"Computer\",\n  computerWonGame: false,\n  disablePlayerMove: false,\n  emptyGameboardValue: \"empty\",\n  freemissGameboardValue: \"freemiss\",\n  gameboardPlayerOne: [],\n  gameboardPlayerOneInitialState: [\n    \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\",\n    \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\",\n    \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\",\n    \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\",\n    \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\",\n    \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\",\n    \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\",\n    \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\",\n    \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\",\n    \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\",\n  ],\n  gameboardPlayerTwo: [],\n  gameboardPlayerTwoInitialState: [\n    \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\",\n    \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\",\n    \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\",\n    \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\",\n    \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\",\n    \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\",\n    \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\",\n    \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\",\n    \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\",\n    \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\",\n  ],\n  hitGameboardValue: \"hit\",\n  horizontalDirectionValue: \"horizontal\",\n  isGameOver: false,\n  isGameStarted: false,\n  isPlayerOneTurn: true,\n  isPlayerTwoComputer: true,\n  missGameboardValue: \"miss\",\n  playerOneName: \"Player 1\",\n  playerOneWonGame: false,\n  playerTwoName: \"Player 2\",\n  playerTwoWonGame: false,\n  previousHitComputerCellsNotSunkenShip: [],\n  previousHitComputerCellsNotSunkenShipDefaultValue: [],\n  previousHitDirectionNotSunkenShip: null,\n  previousHitDirectionNotSunkenShipDefaultValue: null,\n  previousHitDirectionNotSunkenShipHorizontalValue: \"horizontal\",\n  previousHitDirectionNotSunkenShipVerticalValue: \"vertical\",\n  shipIsSunkenPropertyText: \"isSunken\",\n  shipLengthPropertyText: \"shipLength\",\n  shipNamePropertyText: \"name\",\n  ships: [\n    {\n      name: \"d1\",\n      shipLength: 1,\n    },\n    {\n      name: \"d2\",\n      shipLength: 1,\n    },\n    {\n      name: \"d3\",\n      shipLength: 1,\n    },\n    {\n      name: \"d4\",\n      shipLength: 1,\n    },\n    {\n      name: \"s1\",\n      shipLength: 2,\n    },\n    {\n      name: \"s2\",\n      shipLength: 2,\n    },\n    {\n      name: \"s3\",\n      shipLength: 2,\n    },\n    {\n      name: \"b1\",\n      shipLength: 3,\n    },\n    {\n      name: \"b2\",\n      shipLength: 3,\n    },\n    {\n      name: \"c1\",\n      shipLength: 4,\n    },\n  ],\n  showGameboards: true,\n  showModalGameOver: false,\n  showModalGameSwitchTurnToPlayerOne: false,\n  showModalGameSwitchTurnToPlayerTwo: false,\n  showModalPickOpponent: false,\n  showModalPreGameGameboardPlayerOneGridShipPlacement: false,\n  showModalPreGameGameboardPlayerOneGridShipPlacementAgainstComputer: false,\n  showModalPreGameGameboardPlayerTwoGridShipPlacement: false,\n  showModalPreGamePlayerOneName: false,\n  showModalPreGamePlayerOneNameAgainstComputer: false,\n  showModalPreGamePlayerTwoName: false,\n  showModalPreGameSwitchTurnToPlayerOne: false,\n  showModalPreGameSwitchTurnToPlayerOneGameboard: false,\n  showModalPreGameSwitchTurnToPlayerTwoGameboard: false,\n  verticalDirectionValue: \"vertical\",\n};\n\nexport const gameSlice = createSlice({\n  name: 'game',\n  initialState,\n  reducers: {\n    updatePlayerOneName: (state, action) => {\n      state.playerOneName = action.payload;\n    },\n    updatePlayerTwoName: (state, action) => {\n      state.playerTwoName = action.payload;\n    },\n    updateIsPlayerOneTurn: (state, action) => {\n      state.isPlayerOneTurn = action.payload;\n    },\n    resetComputerHitTurnAgainCount: (state) => {\n      state.computerHitTurnAgainCount = state.computerHitTurnAgainCountDefaultValue;\n    },\n    incrementComputerHitTurnAgainCount: (state) => {\n      state.computerHitTurnAgainCount += 1;\n    },\n    updateIsGameStarted: (state, action) => {\n      state.isGameStarted = action.payload;\n    },\n    updateIsGameOver: (state, action) => {\n      state.isGameOver = action.payload;\n    },\n    updatePlayerOneWonGame: (state, action) => {\n      state.playerOneWonGame = action.payload;\n    },\n    updatePlayerTwoWonGame: (state, action) => {\n      state.playerTwoWonGame = action.payload;\n    },\n    updateComputerWonGame: (state, action) => {\n      state.computerWonGame = action.payload;\n    },\n    updateIsPlayerTwoComputer: (state, action) => {\n      state.isPlayerTwoComputer = action.payload;\n    },\n    updateGameboardPlayerOneInitialState: (state, action) => {\n      state.gameboardPlayerOneInitialState = action.payload;\n    },\n    updateGameboardPlayerTwoInitialState: (state, action) => {\n      state.gameboardPlayerTwoInitialState = action.payload;\n    },\n    updateGameboardPlayerOne: (state, action) => {\n      state.gameboardPlayerOne = action.payload;\n    },\n    updateGameboardPlayerTwo: (state, action) => {\n      state.gameboardPlayerTwo = action.payload;\n    },\n    updatePreviousHitComputerCellsNotSunkenShip: (state, action) => {\n      state.previousHitComputerCellsNotSunkenShip = action.payload;\n    },\n    updatePreviousHitDirectionNotSunkenShip: (state, action) => {\n      state.previousHitDirectionNotSunkenShip = action.payload;\n    },\n    updateShowGameboards: (state, action) => {\n      state.showGameboards = action.payload;\n    },\n    updateShowModalGameOver: (state, action) => {\n      state.showModalGameOver = action.payload;\n    },\n    updateShowModalPickOpponent: (state, action) => {\n      state.showModalPickOpponent = action.payload;\n    },\n    updateShowModalGameSwitchTurnToPlayerTwo: (state, action) => {\n      state.showModalGameSwitchTurnToPlayerTwo = action.payload;\n    },\n    updateShowModalGameSwitchTurnToPlayerOne: (state, action) => {\n      state.showModalGameSwitchTurnToPlayerOne = action.payload;\n    },\n    updateDisablePlayerMove: (state, action) => {\n      state.disablePlayerMove = action.payload;\n    },\n    handleIsGameOver: (state, action) => {\n      state.isGameStarted = false;\n      state.isGameOver = true;\n      if (action.payload.computerWon) {\n        state.computerHitTurnAgainCount = state.computerHitTurnAgainCountDefaultValue;\n        state.computerWonGame = true;\n      } else if (!action.payload.computerWon) {\n        if (state.isPlayerOneTurn) {\n          state.playerOneWonGame = true;\n        } else if (!state.isPlayerOneTurn) {\n          state.playerTwoWonGame = true;\n        }\n      }\n      state.showModalGameOver = true;\n    },\n    handleStartGame: (state) => {\n      state.isGameOver = false;\n      state.isPlayerOneTurn = true;\n      state.computerHitTurnAgainCount = state.computerHitTurnAgainCountDefaultValue;\n      state.disablePlayerMove = false;\n      state.isGameStarted = true;\n    },\n    handleButtonNewGame: (state) => {\n      state.showModalGameOver = false;\n      state.showModalPickOpponent = true;\n    },\n    handleGameSwitchPlayerTurn: (state) => {\n      state.showGameboards = false;\n      state.disablePlayerMove = false;\n      if (state.isPlayerOneTurn) {\n        state.showModalGameSwitchTurnToPlayerTwo = true;\n      } else if (!state.isPlayerOneTurn) {\n        state.showModalGameSwitchTurnToPlayerOne = true;\n      }\n      state.isPlayerOneTurn = !state.isPlayerOneTurn;\n    },\n    handleNewGame: (state, action) => {\n      state.isGameOver = false;\n      state.isGameStarted = false;\n      state.computerWonGame = false;\n      state.playerOneWonGame = false;\n      state.playerTwoWonGame = false;\n      state.previousHitComputerCellsNotSunkenShip = state.previousHitComputerCellsNotSunkenShipDefaultValue;\n      state.previousHitDirectionNotSunkenShip = state.previousHitDirectionNotSunkenShipDefaultValue;\n      state.gameboardPlayerOneInitialState = action.payload.generatedRandomGameboardPlayerOneInitialState;\n      state.gameboardPlayerTwoInitialState = action.payload.generatedRandomGameboardPlayerTwoInitialState;\n    },\n    handleNewGameAgainstComputerWithRandomGameboardInitialStates: (state, action) => {\n      gameSlice.caseReducers.handleNewGame(state, action);\n      state.isPlayerTwoComputer = true;\n      gameSlice.caseReducers.handleStartGame(state);\n    },\n    updateShowModalPreGamePlayerOneNameAgainstComputer: (state, action) => {\n      state.showModalPreGamePlayerOneNameAgainstComputer = action.payload;\n    },\n    updateShowModalPreGameGameboardPlayerOneGridShipPlacementAgainstComputer: (state, action) => {\n      state.showModalPreGameGameboardPlayerOneGridShipPlacementAgainstComputer = action.payload;\n    },\n    updateShowModalPreGamePlayerOneName: (state, action) => {\n      state.showModalPreGamePlayerOneName = action.payload;\n    },\n    updateShowModalPreGamePlayerTwoName: (state, action) => {\n      state.showModalPreGamePlayerTwoName = action.payload;\n    },\n    updateShowModalPreGameSwitchTurnToPlayerOneGameboard: (state, action) => {\n      state.showModalPreGameSwitchTurnToPlayerOneGameboard = action.payload;\n    },\n    updateShowModalPreGameGameboardPlayerOneGridShipPlacement: (state, action) => {\n      state.showModalPreGameGameboardPlayerOneGridShipPlacement = action.payload;\n    },\n    updateShowModalPreGameSwitchTurnToPlayerTwoGameboard: (state, action) => {\n      state.showModalPreGameSwitchTurnToPlayerTwoGameboard = action.payload;\n    },\n    updateShowModalPreGameGameboardPlayerTwoGridShipPlacement: (state, action) => {\n      state.showModalPreGameGameboardPlayerTwoGridShipPlacement = action.payload;\n    },\n    updateShowModalPreGameSwitchTurnToPlayerOne: (state, action) => {\n      state.showModalPreGameSwitchTurnToPlayerOne = action.payload;\n    },\n    handleModalPickOpponentComputer: (state, action) => {\n      state.showModalPickOpponent = false;\n      gameSlice.caseReducers.handleNewGame(state, action);\n      state.isPlayerTwoComputer = true;\n      state.showGameboards = false;\n      state.showModalPreGamePlayerOneNameAgainstComputer = true;\n    },\n    handleModalPreGamePlayerOneNameAgainstComputer: (state) => {\n      state.showModalPreGamePlayerOneNameAgainstComputer = false;\n      state.showModalPreGameGameboardPlayerOneGridShipPlacementAgainstComputer = true;\n    },\n    handleModalPickOpponentPlayer: (state, action) => {\n      state.showModalPickOpponent = false;\n      gameSlice.caseReducers.handleNewGame(state, action);\n      state.isPlayerTwoComputer = false;\n      state.showGameboards = false;\n      state.showModalPreGamePlayerOneName = true;\n    },\n    handleModalPreGamePlayerOneName: (state) => {\n      state.showModalPreGamePlayerOneName = false;\n      state.showModalPreGamePlayerTwoName = true;\n    },\n    handleModalPreGamePlayerTwoName: (state) => {\n      state.showModalPreGamePlayerTwoName = false;\n      state.showModalPreGameSwitchTurnToPlayerOneGameboard = true;\n    },\n    handleModalPreGameSwitchToPlayerOneGameboard: (state) => {\n      state.showModalPreGameSwitchTurnToPlayerOneGameboard = false;\n      state.showModalPreGameGameboardPlayerOneGridShipPlacement = true;\n    },\n    handleModalPreGameSwitchTurnToPlayerTwo: (state) => {\n      state.showModalPreGameSwitchTurnToPlayerTwoGameboard= false;\n      state.showModalPreGameGameboardPlayerTwoGridShipPlacement = true;\n    },\n    handleModalPreGameSwitchTurnToPlayerOne: (state) => {\n      state.showModalPreGameSwitchTurnToPlayerOne = false;\n      state.showGameboards = true;\n      gameSlice.caseReducers.handleStartGame(state);\n    },\n    handleModalGameSwitchTurnToPlayerTwo: (state) => {\n      state.showModalGameSwitchTurnToPlayerTwo = false;\n      state.showGameboards = true;\n    },\n    handleModalGameSwitchTurnToPlayerOne: (state) => {\n      state.showModalGameSwitchTurnToPlayerOne = false;\n      state.showGameboards = true;\n    },\n  },\n});\n\nexport const handleMove = createAsyncThunk('game/handleMove', async(index, { dispatch, getState }) => {\n  let gameboard;\n  let gameboardInitialState;\n  const state = (() => (getState().game))();\n  const isComputer = !state.isPlayerOneTurn && state.isPlayerTwoComputer;\n\n  if (state.isPlayerOneTurn) {\n    gameboard = state.gameboardPlayerTwo;\n    gameboardInitialState = state.gameboardPlayerTwoInitialState;\n  } else {\n    gameboard = state.gameboardPlayerOne;\n    gameboardInitialState = state.gameboardPlayerOneInitialState;\n  };\n\n  const arrayOfShipNames = getArrayOfArrayOfObjectsKeyValues(state.ships, state.shipNamePropertyText);\n  if (isHiddenShipGameboardCell(gameboard, +index, arrayOfShipNames)) {\n    const newGameboardStateAfterHitLogicWithFreeMissCells = getGameboardAfterHitLogic(\n      gameboard,\n      +index,\n      state.hitGameboardValue,\n      isSunkenShip,\n      getAllIndexesOfAnArrayValue,\n      gameboardInitialState,\n      addFreeMissGameboardValueCellsAroundSunkenShip,\n      state.freemissGameboardValue,\n      state.emptyGameboardValue,\n      addFreeMissGameboardValueCellsAroundCellDiagonally\n    );\n    if (isComputer) {\n      if (isSunkenShipAfterHit(gameboard, +index, state.hitGameboardValue, isSunkenShip)) {\n        // currently \"hit\" ship is sunken\n        dispatch(updatePreviousHitComputerCellsNotSunkenShip(state.previousHitComputerCellsNotSunkenShipDefaultValue));\n        dispatch(updatePreviousHitDirectionNotSunkenShip(state.previousHitDirectionNotSunkenShipDefaultValue));\n      } else {\n        // currently \"hit\" ship isn't sunken\n        let copyPreviousHitComputerCellNumbersInfo = [...state.previousHitComputerCellsNotSunkenShip];\n        copyPreviousHitComputerCellNumbersInfo.push(+index);\n        dispatch(updatePreviousHitComputerCellsNotSunkenShip(copyPreviousHitComputerCellNumbersInfo));\n      };\n      dispatch(incrementComputerHitTurnAgainCount());\n    };\n    // updated gameboard\n    if (state.isPlayerOneTurn) {\n      dispatch(updateGameboardPlayerTwo(newGameboardStateAfterHitLogicWithFreeMissCells));\n    } else {\n      dispatch(updateGameboardPlayerOne(newGameboardStateAfterHitLogicWithFreeMissCells));\n    };\n    // logic for isGameOver\n    const allShipsSunken = isAllShipsSunken(newGameboardStateAfterHitLogicWithFreeMissCells, state.ships, state.shipNamePropertyText);\n    if (allShipsSunken) {\n      dispatch(handleIsGameOver({ computerWon: isComputer }));\n    };\n  } else if (isEmptyGameboardCell(gameboard, +index, state.emptyGameboardValue)) {\n    // logic for miss\n    const newGameboardStateAfterMissLogicWithMissCell = getGameboardAfterMissLogic(gameboard, +index, state.missGameboardValue);\n    if (state.isPlayerOneTurn) {\n      dispatch(updateGameboardPlayerTwo(newGameboardStateAfterMissLogicWithMissCell));\n    } else {\n      dispatch(updateGameboardPlayerOne(newGameboardStateAfterMissLogicWithMissCell));\n    };\n    if (isComputer) {\n      dispatch(resetComputerHitTurnAgainCount());\n    };\n    if (state.isPlayerTwoComputer) {\n      dispatch(updateIsPlayerOneTurn(!state.isPlayerOneTurn));\n    };\n    if (!isComputer && !state.isPlayerTwoComputer) {\n      dispatch(updateDisablePlayerMove(true));\n      setTimeout(() => {\n        dispatch(handleGameSwitchPlayerTurn());\n      }, 600)\n    };\n  };\n});\n\nexport const handlePlayerMove = createAsyncThunk('game/handlePlayerMove', async(index, { dispatch, getState }) => {\n  let gameboardPlayer;\n  let isPlayerTurn;\n  const state = (() => getState().game)();\n  if (state.isPlayerOneTurn) {\n    gameboardPlayer = state.gameboardPlayerTwo;\n    isPlayerTurn = state.isPlayerOneTurn;\n  } else {\n    gameboardPlayer = state.gameboardPlayerOne;\n    isPlayerTurn = !state.isPlayerOneTurn;\n  };\n\n  const arrayOfShipNames = getArrayOfArrayOfObjectsKeyValues(state.ships, state.shipNamePropertyText);\n  if (isValidPlayerTurn(\n    gameboardPlayer, \n    +index,\n    isPlayerTurn, \n    state.isGameStarted,\n    state.isGameOver,\n    state.emptyGameboardValue,\n    arrayOfShipNames,\n    state.disablePlayerMove,\n    state.isPlayerOneTurn,\n    state.isPlayerTwoComputer\n  )) {\n    dispatch(handleMove(+index));\n  };\n});\n\nexport const { \n  handleGameSwitchPlayerTurn,\n  handleButtonNewGame,\n  handleIsGameOver,\n  handleModalGameSwitchTurnToPlayerOne,\n  handleModalGameSwitchTurnToPlayerTwo,\n  handleModalPickOpponentComputer,\n  handleModalPickOpponentPlayer,\n  handleModalPreGamePlayerOneName,\n  handleModalPreGamePlayerOneNameAgainstComputer,\n  handleModalPreGamePlayerTwoName,\n  handleModalPreGameSwitchToPlayerOneGameboard,\n  handleModalPreGameSwitchTurnToPlayerOne,\n  handleModalPreGameSwitchTurnToPlayerTwo,\n  handleNewGame,\n  handleNewGameAgainstComputerWithRandomGameboardInitialStates,\n  handleStartGame,\n  incrementComputerHitTurnAgainCount,\n  resetComputerHitTurnAgainCount,\n  updateComputerWonGame,\n  updateDisablePlayerMove,\n  updateGameboardPlayerOne,\n  updateGameboardPlayerOneInitialState,\n  updateGameboardPlayerTwo,\n  updateGameboardPlayerTwoInitialState,\n  updateIsGameOver,\n  updateIsGameStarted,\n  updateIsPlayerOneTurn,\n  updateIsPlayerTwoComputer,\n  updatePlayerOneName, \n  updatePlayerOneWonGame,\n  updatePlayerTwoName,\n  updatePlayerTwoWonGame,\n  updatePreviousHitComputerCellsNotSunkenShip,\n  updatePreviousHitDirectionNotSunkenShip,\n  updateShowGameboards,\n  updateShowModalGameOver,\n  updateShowModalGameSwitchTurnToPlayerOne,\n  updateShowModalGameSwitchTurnToPlayerTwo,\n  updateShowModalPickOpponent,\n  updateShowModalPreGameGameboardPlayerOneGridShipPlacement,\n  updateShowModalPreGameGameboardPlayerOneGridShipPlacementAgainstComputer,\n  updateShowModalPreGameGameboardPlayerTwoGridShipPlacement,\n  updateShowModalPreGamePlayerOneName,\n  updateShowModalPreGamePlayerOneNameAgainstComputer,\n  updateShowModalPreGamePlayerTwoName,\n  updateShowModalPreGameSwitchTurnToPlayerOne,\n  updateShowModalPreGameSwitchTurnToPlayerOneGameboard,\n  updateShowModalPreGameSwitchTurnToPlayerTwoGameboard,\n} = gameSlice.actions;\n\n// Selector functions\nexport const selectAmountOfColumns = (state) => state.game.amountOfColumns;\nexport const selectAmountOfRows = (state) => state.game.amountOfRows;\nexport const selectButtonNextStepText = (state) => state.game.buttonNextStepText;\nexport const selectComputerHitTurnAgainCount = (state) => state.game.computerHitTurnAgainCount;\nexport const selectComputerName = (state) => state.game.computerName;\nexport const selectComputerWonGame = (state) => state.game.computerWonGame;\nexport const selectDisablePlayerMove = (state) => state.game.disablePlayerMove;\nexport const selectEmptyGameboardValue = (state) => state.game.emptyGameboardValue;\nexport const selectFreemissGameboardValue = (state) => state.game.freemissGameboardValue;\nexport const selectGameboardPlayerOne = (state) => state.game.gameboardPlayerOne;\nexport const selectGameboardPlayerOneInitialState = (state) => state.game.gameboardPlayerOneInitialState;\nexport const selectGameboardPlayerTwo = (state) => state.game.gameboardPlayerTwo;\nexport const selectGameboardPlayerTwoInitialState = (state) => state.game.gameboardPlayerTwoInitialState;\nexport const selectHitGameboardValue = (state) => state.game.hitGameboardValue;\nexport const selectHorizontalDirectionValue = (state) => state.game.horizontalDirectionValue;\nexport const selectIsGameOver = (state) => state.game.isGameOver;\nexport const selectIsGameStarted = (state) => state.game.isGameStarted;\nexport const selectIsPlayerOneTurn = (state) => state.game.isPlayerOneTurn;\nexport const selectIsPlayerTwoComputer = (state) => state.game.isPlayerTwoComputer;\nexport const selectMissGameboardValue = (state) => state.game.missGameboardValue;\nexport const selectPlayerOneName = (state) => state.game.playerOneName;\nexport const selectPlayerOneWonGame = (state) => state.game.playerOneWonGame;\nexport const selectPlayerTwoName = (state) => state.game.playerTwoName;\nexport const selectPlayerTwoWonGame = (state) => state.game.playerTwoWonGame;\nexport const selectPreviousHitComputerCellsNotSunkenShip = (state) => state.game.previousHitComputerCellsNotSunkenShip;\nexport const selectPreviousHitComputerCellsNotSunkenShipDefaultValue = (state) => state.game.previousHitComputerCellsNotSunkenShipDefaultValue;\nexport const selectPreviousHitDirectionNotSunkenShip = (state) => state.game.previousHitDirectionNotSunkenShip;\nexport const selectPreviousHitDirectionNotSunkenShipDefaultValue = (state) => state.game.previousHitDirectionNotSunkenShipDefaultValue;\nexport const selectPreviousHitDirectionNotSunkenShipHorizontalValue = (state) => state.game.previousHitDirectionNotSunkenShipHorizontalValue;\nexport const selectPreviousHitDirectionNotSunkenShipVerticalValue = (state) => state.game.previousHitDirectionNotSunkenShipVerticalValue;\nexport const selectShipIsSunkenPropertyText = (state) => state.game.shipIsSunkenPropertyText;\nexport const selectShipLengthPropertyText = (state) => state.game.shipLengthPropertyText;\nexport const selectShipNamePropertyText = (state) => state.game.shipNamePropertyText;\nexport const selectShips = (state) => state.game.ships;\nexport const selectShowGameboards = (state) => state.game.showGameboards;\nexport const selectShowModalGameOver = (state) => state.game.showModalGameOver;\nexport const selectShowModalGameSwitchTurnToPlayerOne = (state) => state.game.showModalGameSwitchTurnToPlayerOne;\nexport const selectShowModalGameSwitchTurnToPlayerTwo = (state) => state.game.showModalGameSwitchTurnToPlayerTwo;\nexport const selectShowModalPickOpponent = (state) => state.game.showModalPickOpponent;\nexport const selectShowModalPreGameGameboardPlayerOneGridShipPlacement = (state) => state.game.showModalPreGameGameboardPlayerOneGridShipPlacement;\nexport const selectShowModalPreGameGameboardPlayerOneGridShipPlacementAgainstComputer = (state) => state.game.showModalPreGameGameboardPlayerOneGridShipPlacementAgainstComputer;\nexport const selectShowModalPreGameGameboardPlayerTwoGridShipPlacement = (state) => state.game.showModalPreGameGameboardPlayerTwoGridShipPlacement;\nexport const selectShowModalPreGamePlayerOneName = (state) => state.game.showModalPreGamePlayerOneName;\nexport const selectShowModalPreGamePlayerOneNameAgainstComputer = (state) => state.game.showModalPreGamePlayerOneNameAgainstComputer;\nexport const selectShowModalPreGamePlayerTwoName = (state) => state.game.showModalPreGamePlayerTwoName;\nexport const selectShowModalPreGameSwitchTurnToPlayerOne = (state) => state.game.showModalPreGameSwitchTurnToPlayerOne;\nexport const selectShowModalPreGameSwitchTurnToPlayerOneGameboard = (state) => state.game.showModalPreGameSwitchTurnToPlayerOneGameboard;\nexport const selectShowModalPreGameSwitchTurnToPlayerTwoGameboard = (state) => state.game.showModalPreGameSwitchTurnToPlayerTwoGameboard;\nexport const selectVerticalDirectionValue = (state) => state.game.verticalDirectionValue;\n\nexport default gameSlice.reducer;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { getArrayOfArrayOfObjectsKeyValues } from '../../../../common/utils/getArrayOfArrayOfObjectsKeyValues/getArrayOfArrayOfObjectsKeyValues';\nimport { isValidPlayerTurn } from '../../../../common/utils/isValidPlayerTurn/isValidPlayerTurn';\nimport {\n  handlePlayerMove, selectAmountOfColumns,\n  selectAmountOfRows,\n  selectDisablePlayerMove,\n  selectEmptyGameboardValue,\n  selectFreemissGameboardValue,\n  selectGameboardPlayerOne,\n  selectGameboardPlayerTwo,\n  selectHitGameboardValue,\n  selectIsGameOver,\n  selectIsGameStarted,\n  selectIsPlayerOneTurn,\n  selectIsPlayerTwoComputer,\n  selectMissGameboardValue, selectShipNamePropertyText,\n  selectShips\n} from '../../gameSlice';\nimport './GameboardPlayerGrid.scss';\n\nexport const GameboardPlayerGrid = ({ isPlayerOne }) => {\n  const dispatch = useDispatch();\n  const amountOfColumns = useSelector(selectAmountOfColumns);\n  const amountOfRows = useSelector(selectAmountOfRows);\n  const disablePlayerMove = useSelector(selectDisablePlayerMove);\n  const emptyGameboardValue = useSelector(selectEmptyGameboardValue);\n  const freemissGameboardValue = useSelector(selectFreemissGameboardValue);\n  const gameboardPlayerOne = useSelector(selectGameboardPlayerOne);\n  const gameboardPlayerTwo = useSelector(selectGameboardPlayerTwo);\n  const hitGameboardValue = useSelector(selectHitGameboardValue);\n  const isGameOver = useSelector(selectIsGameOver);\n  const isGameStarted = useSelector(selectIsGameStarted);\n  const isPlayerOneTurn = useSelector(selectIsPlayerOneTurn);\n  const isPlayerTwoComputer = useSelector(selectIsPlayerTwoComputer);\n  const missGameboardValue = useSelector(selectMissGameboardValue);\n  const shipNamePropertyText = useSelector(selectShipNamePropertyText);\n  const ships = useSelector(selectShips);\n\n  const getGameboardPlayer = (isPlayerOne) => {\n    if (isPlayerOne) {\n      return gameboardPlayerTwo;\n    } else {\n      return gameboardPlayerOne;\n    };\n  };\n\n  const getIsPlayerTurn = (isPlayerOne) => {\n    if (isPlayerOne) {\n      return isPlayerOneTurn;\n    } else {\n      return !isPlayerOneTurn;\n    };\n  };\n\n  const gameboardPlayer = getGameboardPlayer(isPlayerOne);\n  const isPlayerTurn = getIsPlayerTurn(isPlayerOne);\n  const arrayOfShipNames = getArrayOfArrayOfObjectsKeyValues(ships, shipNamePropertyText);\n\n  const onGameboardCellClicked = (id) => {\n    if (isValidPlayerTurn(\n      gameboardPlayer, \n      +id,\n      isPlayerTurn, \n      isGameStarted,\n      isGameOver,\n      emptyGameboardValue,\n      arrayOfShipNames,\n      disablePlayerMove,\n      isPlayerOneTurn,\n      isPlayerTwoComputer\n    )) {\n      dispatch(handlePlayerMove(+id));\n    }; \n  };\n  \n  return (\n    <div className=\"gameboard-wrapper\">\n      <div \n        className={`gameboard ${disablePlayerMove ? \"gameboard-inactive\" : isPlayerTurn && isGameStarted ? \"gameboard-active\" : \"gameboard-inactive\"} gameboard-player`}\n        style={{\n          gridTemplateColumns: `repeat(${amountOfColumns}, 1fr)`, \n          gridTemplateRows: `repeat(${amountOfRows}, auto)`,\n        }}\n      >\n        {gameboardPlayer.map((cell, id) => (\n          <div \n            key={id} \n            id={id} \n            className={`gameboard-cell ${\n                  gameboardPlayer[id] === hitGameboardValue \n                ? \"hit\" \n                : gameboardPlayer[id] === missGameboardValue \n                ? \"miss\" \n                : gameboardPlayer[id] === freemissGameboardValue \n                ? \"freemiss\" \n                : gameboardPlayer[id] === emptyGameboardValue\n                ? \"empty\"\n                : isGameOver\n                ? \"ship\"\n                : isPlayerOne && isPlayerTwoComputer \n                ? \"empty\" \n                : !isPlayerOne && isPlayerTwoComputer \n                ? \"ship\" \n                : !isPlayerTurn \n                ? \"ship\" \n                : !isGameStarted && !isGameOver\n                ? \"ship\"\n                : \"empty\"\n              }${\n                   (gameboardPlayer[id] === emptyGameboardValue || !([hitGameboardValue, missGameboardValue, freemissGameboardValue].includes(gameboardPlayer[id]))) \n                && isPlayerTurn\n                && !isGameOver\n                && isGameStarted\n                && isPlayerTurn\n                && !(!isPlayerOne && isPlayerTwoComputer)\n                && !disablePlayerMove\n                ? \" possible-move\"\n                : \"\"\n              }`\n            } \n            onClick={(event) => onGameboardCellClicked(+event.target.id)}\n          >\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n","import './GameboardShipStatsTitle.scss';\n\nexport const GameboardShipStatsTitle = ({ shipStatsTitle }) => {\n  return (\n    <h2 className=\"gameboard-ship-stats-title\">{shipStatsTitle} ships</h2>\n  );\n};\n","import { useSelector } from \"react-redux\";\nimport { getPlayerName } from \"../../../../common/utils/getPlayerName/getPlayerName\";\nimport { selectComputerName, selectIsPlayerTwoComputer, selectPlayerOneName, selectPlayerTwoName } from \"../../gameSlice\";\nimport \"./GameboardPlayerGridTitle.scss\";\n\nexport const GameboardPlayerGridTitle = ({ isPlayerOne }) => {\n  const computerName = useSelector(selectComputerName);\n  const isPlayerTwoComputer = useSelector(selectIsPlayerTwoComputer);\n  const playerOneName = useSelector(selectPlayerOneName);\n  const playerTwoName = useSelector(selectPlayerTwoName);\n  \n  const playerName = getPlayerName(isPlayerOne, isPlayerTwoComputer, playerOneName, playerTwoName, computerName);\n\n  return (\n    <h1 className=\"gameboard-player-grid-title\">{playerName}</h1>\n  );\n};\n","export const getPlayerName = (isPlayerOne, isPlayerTwoComputer, playerOneName, playerTwoName, computerName) => {\n  if (isPlayerOne) {\n    return playerOneName;\n  } else if (!isPlayerOne && !isPlayerTwoComputer) {\n    return playerTwoName;\n  } else {\n    return computerName;\n  };\n};\n","import { useSelector } from 'react-redux';\nimport { addKeyValuePairToAllObjectsInArray } from '../../../../common/utils/addKeyValuePairToAllObjectsInArray/addKeyValuePairToAllObjectsInArray';\nimport { getArrayWithUniqueObjectKeyValuesFromArrayWithObjects } from '../../../../common/utils/getArrayWithUniqueObjectKeyValuesFromArrayWithObjects/getArrayWithUniqueObjectKeyValuesFromArrayWithObjects';\nimport { getArrayWithUpdatedObjectsIsSunkenPropertyValue } from '../../../../common/utils/getArrayWithUpdatedObjectsIsSunkenPropertyValue/getArrayWithUpdatedObjectsIsSunkenPropertyValue';\nimport { isSunkenShip } from '../../../../common/utils/isSunkenShip/isSunkenShip';\nimport { sortArrayByOrder } from '../../../../common/utils/sortArrayByOrder/sortArrayByOrder';\nimport { sortArrayOfObjectsBasedOnTwoKeyValuesByOrder } from '../../../../common/utils/sortArrayOfObjectsBasedOnTwoKeyValuesByOrder/sortArrayOfObjectsBasedOnTwoKeyValuesByOrder';\nimport {\n  selectShipIsSunkenPropertyText,\n  selectShipLengthPropertyText,\n  selectShipNamePropertyText,\n  selectShips\n} from '../../gameSlice';\nimport './GameboardShipStats.scss';\n\nexport const GameboardShipStats = ({ gameboard }) => {\n  const shipIsSunkenPropertyText = useSelector(selectShipIsSunkenPropertyText);\n  const shipLengthPropertyText = useSelector(selectShipLengthPropertyText);\n  const shipNamePropertyText = useSelector(selectShipNamePropertyText);\n  const ships = useSelector(selectShips);\n\n  const arrayWithUniqueShipLengthValues = getArrayWithUniqueObjectKeyValuesFromArrayWithObjects(ships, shipLengthPropertyText);\n  const sortedArrayWithUniqueShipLengthValuesDescendingOrder = sortArrayByOrder(arrayWithUniqueShipLengthValues, \"descending\");\n\n  const arrayOfShipObjectsWithIsSunkenPropertyFalse = addKeyValuePairToAllObjectsInArray(ships, shipIsSunkenPropertyText, false);\n  const arrayOfShipObjectsWithUpdatedIsSunkenPropertyValue = getArrayWithUpdatedObjectsIsSunkenPropertyValue(arrayOfShipObjectsWithIsSunkenPropertyFalse, shipIsSunkenPropertyText, shipNamePropertyText, gameboard, isSunkenShip);\n  const sortedArrayOfShipObjectsBasedOnPropertiesShipLengthAndIsSunken = sortArrayOfObjectsBasedOnTwoKeyValuesByOrder(arrayOfShipObjectsWithUpdatedIsSunkenPropertyValue, shipLengthPropertyText, shipIsSunkenPropertyText, \"descending\", \"descending\");\n\n  return (\n    <div className=\"gameboard-ship-stats\">\n      {\n        sortedArrayWithUniqueShipLengthValuesDescendingOrder.map((shipLengthNumber, id) => (\n          <div key={id} className=\"gameboard-ship-stats-shiplength-row\">\n            {\n              sortedArrayOfShipObjectsBasedOnPropertiesShipLengthAndIsSunken.map(function(ship, id) {\n                if (ship[shipLengthPropertyText] === shipLengthNumber) {\n                  return (\n                    <div key={id} className=\"gameboard-ship-stats-ship\">\n                      {[...Array(ship[shipLengthPropertyText])].map((shipLengthPropertyText, id) => (\n                        <div \n                          key={id} \n                          className={`gameboard-ship-stats-ship-cell ${isSunkenShip(gameboard, ship[shipNamePropertyText]) ? \"gameboard-ship-stats-ship-sunken\" : \"gameboard-ship-stats-ship-hidden\"}`}\n                        >\n                        </div>\n                      ))}\n                    </div>\n                  );\n                };\n                return null;\n              })\n            }\n          </div>\n        ))\n      }\n    </div>\n  );\n};\n","export const addKeyValuePairToAllObjectsInArray = (array, key, value) => {\n  return array.map((obj) => ({\n    ...obj,\n    [key]: value       \n  }));\n};\n","export const sortArrayByOrder = (array, order) => {\n  let copyArray = [...array];\n  let sortedArrayByOrder;\n  if (order === \"ascending\") {\n    sortedArrayByOrder = copyArray.sort((a, b) => (a - b));\n  } else if (order === \"descending\") {\n    sortedArrayByOrder = copyArray.sort((a, b) => (b - a));\n  }\n  return sortedArrayByOrder;\n};\n","export const getArrayWithUniqueObjectKeyValuesFromArrayWithObjects = (ships, key) => {\n  const copyShips = [...ships];\n  const arrayWithObjectKeyValues = copyShips.map(ship => ship[key]);\n  const arrayWithUniqueObjectKeyValues = [...new Set(arrayWithObjectKeyValues)];\n  return arrayWithUniqueObjectKeyValues;\n};\n","export const sortArrayOfObjectsBasedOnTwoKeyValuesByOrder = (array, keyOne, keyTwo, keyOneOrder, keyTwoOrder) => {\n  let copyArray = [...array];\n  let sortedArrayOfObjectsBasedOnTwoKeyValuesByOrder;\n  if (keyOneOrder === \"ascending\") {\n    sortedArrayOfObjectsBasedOnTwoKeyValuesByOrder = copyArray.sort((one, other) => {\n      if (one[keyOne] - other[keyOne] > 0) {\n        return 1;\n      } else if (one[keyOne] - other[keyOne] < 0) {\n        return -1;\n      } else if (one[keyOne] === other[keyOne]) {\n        if (keyTwoOrder === \"ascending\") {\n          return (one[keyTwo] - other[keyTwo]);\n        } else if (keyTwoOrder === \"descending\") {\n          return (other[keyTwo] - one[keyTwo]);\n        } \n      };\n      return 0;\n    });\n  } else if (keyOneOrder === \"descending\") {\n    sortedArrayOfObjectsBasedOnTwoKeyValuesByOrder = copyArray.sort((one, other) => {\n      if (other[keyOne] - one[keyOne] > 0) {\n        return 1;\n      }\n      if (other[keyOne] - one[keyOne] < 0) {\n        return -1;\n      }\n      else if (one[keyOne] === other[keyOne]) {\n        if (keyTwoOrder === \"ascending\") {\n          return (one[keyTwo] - other[keyTwo]);\n        } else if (keyTwoOrder === \"descending\") {\n          return (other[keyTwo] - one[keyTwo]);\n        } \n      }\n      return 0;\n    });\n  }\n  \n  return sortedArrayOfObjectsBasedOnTwoKeyValuesByOrder;\n};\n","export const getArrayWithUpdatedObjectsIsSunkenPropertyValue = (array, isSunkenKeyValue, shipNameValue, gameboard, isSunkenShip) => {\n  let copyArray = [...array];\n  for (const obj of copyArray) {\n    const shipName = obj[shipNameValue];\n    if (isSunkenShip(gameboard, shipName)) {\n      obj[isSunkenKeyValue] = true;\n    }\n  }\n  return copyArray\n};\n","import { useState } from \"react\";\nimport \"./Button.scss\";\n\nexport const Button = ({ buttonOnClick, children, disableButton=false }) => {\n  const [isButtonTouchStart, setIsButtonTouchStart] = useState(false);\n  return (\n    <button \n      className={`${disableButton ? \"button button-disabled\" : \"button\"}${isButtonTouchStart ? \" button-touched\" : \"\"}`}\n      disabled={disableButton}\n      onClick={disableButton ? null : (() => buttonOnClick())}\n      onTouchStart={() => setIsButtonTouchStart(true)}\n      onTouchEnd={() => setIsButtonTouchStart(false)}\n    >\n      {children}\n    </button>\n  );\n};\n","import { useDispatch } from \"react-redux\";\nimport { Button } from \"../../../../common/components/Button/Button\";\nimport { handleButtonNewGame } from \"../../gameSlice\";\nimport './GameButtons.scss';\n\nexport const GameButtons = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <div className=\"game-buttons\">\n      <Button buttonOnClick={() => dispatch(handleButtonNewGame())}>New game</Button>\n    </div>\n  );\n};\n","import { useSelector } from 'react-redux';\nimport {\n  selectGameboardPlayerOne,\n  selectGameboardPlayerTwo, selectIsPlayerOneTurn,\n  selectIsPlayerTwoComputer,\n} from '../../gameSlice';\nimport { GameboardPlayerGrid } from '../GameboardPlayerGrid/GameboardPlayerGrid';\nimport { GameboardShipStatsTitle } from '../GameboardShipStatsTitle/GameboardShipStatsTitle';\nimport { GameboardPlayerGridTitle } from '../GameboardPlayerGridTitle/GameboardPlayerGridTitle';\nimport { GameboardShipStats } from '../GameboardShipStats/GameboardShipStats';\nimport { GameButtons } from '../GameButtons/GameButtons';\nimport './GameboardsWrapper.scss';\n\nexport const GameboardsWrapper = () => {\n  const gameboardPlayerOne = useSelector(selectGameboardPlayerOne);\n  const gameboardPlayerTwo = useSelector(selectGameboardPlayerTwo);\n  const isPlayerOneTurn = useSelector(selectIsPlayerOneTurn);\n  const isPlayerTwoComputer = useSelector(selectIsPlayerTwoComputer);\n\n  const opponentShipStatsTitle = \"Opponent's\";\n  const yourShipStatsTitle = \"Your\";\n\n  return (\n    <div className=\"gameboards-wrapper\">\n      {\n          (!isPlayerOneTurn && !isPlayerTwoComputer)\n        ? \n          <>\n            <div className=\"gameboard-player-grid-title-wrapper gameboard-player-grid-title-wrapper-1\">\n              <GameboardPlayerGridTitle isPlayerOne={false} />\n            </div>\n            {/* Player two plays on gameboardPlayerOne */}\n            <div className=\"gameboard-player-grid-wrapper gameboard-player-grid-wrapper-1\">\n              <GameboardPlayerGrid isPlayerOne={false} />\n            </div>\n            <div className=\"gameboard-ship-stats-title-wrapper gameboard-ship-stats-title-wrapper-1\">\n              <GameboardShipStatsTitle shipStatsTitle={opponentShipStatsTitle} />\n            </div>\n            <div className=\"gameboard-ship-stats-wrapper gameboard-ship-stats-wrapper-1\">\n              <GameboardShipStats gameboard={gameboardPlayerOne} />\n            </div>\n            <div className=\"gameboard-player-grid-title-wrapper gameboard-player-grid-title-wrapper-2\">\n              <GameboardPlayerGridTitle isPlayerOne={true} />\n            </div>\n            {/* Player two sees current state of gameboardPlayerTwo where player one plays on */}\n            <div className=\"gameboard-player-grid-wrapper gameboard-player-grid-wrapper-2\">\n              <GameboardPlayerGrid isPlayerOne={true} />\n            </div>\n            <div className=\"gameboard-ship-stats-title-wrapper gameboard-ship-stats-title-wrapper-2\">\n              <GameboardShipStatsTitle shipStatsTitle={yourShipStatsTitle} />\n            </div>\n            <div className=\"gameboard-ship-stats-wrapper gameboard-ship-stats-wrapper-2\">\n              <GameboardShipStats gameboard={gameboardPlayerTwo} />\n            </div>\n          </>\n      :\n        <>\n          <div className=\"gameboard-player-grid-title-wrapper gameboard-player-grid-title-wrapper-1\">\n            <GameboardPlayerGridTitle isPlayerOne={true} />\n          </div>\n          {/* Player one plays on gameboardPlayerTwo */}\n          <div className=\"gameboard-player-grid-wrapper gameboard-player-grid-wrapper-1\">\n            <GameboardPlayerGrid isPlayerOne={true} />\n          </div>\n          <div className=\"gameboard-ship-stats-title-wrapper gameboard-ship-stats-title-wrapper-1\">\n            <GameboardShipStatsTitle shipStatsTitle={opponentShipStatsTitle} />\n          </div>\n          <div className=\"gameboard-ship-stats-wrapper gameboard-ship-stats-wrapper-1\">\n            <GameboardShipStats gameboard={gameboardPlayerTwo} />\n          </div>\n          <div className=\"gameboard-player-grid-title-wrapper gameboard-player-grid-title-wrapper-2\">\n            <GameboardPlayerGridTitle isPlayerOne={false} />\n          </div>\n          {/* Player one sees current state of gameboardPlayerTwo where player two or the computer plays on */}\n          <div className=\"gameboard-player-grid-wrapper gameboard-player-grid-wrapper-2\">\n            <GameboardPlayerGrid isPlayerOne={false} />\n          </div>\n          <div className=\"gameboard-ship-stats-title-wrapper gameboard-ship-stats-title-wrapper-2\">\n            <GameboardShipStatsTitle shipStatsTitle={yourShipStatsTitle} />\n          </div>\n          <div className=\"gameboard-ship-stats-wrapper gameboard-ship-stats-wrapper-2\">\n            <GameboardShipStats gameboard={gameboardPlayerOne} />\n          </div>\n        </>\n      }\n      <div className=\"gameboards-wrapper-button-wrapper\">\n        <GameButtons />\n      </div>\n    </div>\n  );\n};\n","import './ButtonsWrapper.scss';\n\nexport const ButtonsWrapper = ({ children }) => {\n  return (\n    <div className=\"buttons-wrapper\">\n      {children}\n    </div>\n  );\n};\n","import './Modal.scss';\n\nexport const Modal = ({ children, closeModal=false }) => {\n  return (\n  <>\n    <div className=\"modal-overlay\"></div>\n    <div className=\"modal\">\n      <div className=\"modal-content\">\n        {children}\n      </div>\n      {\n          closeModal\n        ? <button \n            className=\"modal-close-button\" \n            onClick={() => closeModal()}\n          >\n            <i className=\"fas fa-times\"></i>\n          </button>\n        : null\n      }\n    </div>\n  </>\n  );\n};\n","import './ModalMessage.scss';\n\nexport const ModalMessage = ({ children }) => {\n  return (\n    <div className=\"modal-message\">\n      {children}\n    </div>\n  );\n};\n","export const capitalizeString = (string) => {\n  return (string.slice(0, 1).toUpperCase() + string.slice(1));\n};\n","export const getLastDigitOfNumber = (number) => {\n  const lastDigitOfNumber = number % 10;\n  return lastDigitOfNumber;\n};\n","export const getLastIdInRowTwoDimensionalArray = (rowNumber, lastColumnNumberOfRow) => {\n  const lastIdInRowTwoDimensionalArray = Number(rowNumber.toString() + lastColumnNumberOfRow);\n  return lastIdInRowTwoDimensionalArray;\n};\n","export const getRowNumberOfIndexTwoDimensionalArray = (id, getFirstDigitOfNumber) => {\n  let rowNumberOfIndexTwoDimensionalArray;\n  if (id < 10) {\n    rowNumberOfIndexTwoDimensionalArray = 0;\n  } else {\n    rowNumberOfIndexTwoDimensionalArray = getFirstDigitOfNumber(id)\n  };\n  return rowNumberOfIndexTwoDimensionalArray;\n};\n","import { Button } from \"../../../../common/components/Button/Button\";\nimport './GameButtonsShipPlacement.scss';\n\nexport const GameButtonsShipPlacement = ({\n  currentIndexShipToBePlaced,\n  isAllShipsPlaced,\n  randomizeGameboardPlayerShipPlacement,\n  resetGameboardPlayerShipPlacement,\n  shipPlacementDirection,\n  toggleShipPlacementDirection,\n  undoLastShipPlacement\n}) => {\n  return (\n    <>\n      <Button \n        buttonOnClick={resetGameboardPlayerShipPlacement}\n        disableButton={\n          isAllShipsPlaced \n          ? false\n          : currentIndexShipToBePlaced === 0 \n          ? true \n          : false\n        }\n      >\n        Reset\n      </Button>\n      <Button buttonOnClick={randomizeGameboardPlayerShipPlacement}>\n        <div className=\"button-text-wrapper\">\n          <div>Randomize</div>\n          <i className=\"fas fa-sync-alt randomise-icon\"></i>\n        </div>\n      </Button>\n      <Button \n        buttonOnClick={undoLastShipPlacement}\n        disableButton={currentIndexShipToBePlaced === 0 ? true : false}\n      >\n        Undo\n      </Button>\n      <Button buttonOnClick={toggleShipPlacementDirection}>\n        {shipPlacementDirection}\n      </Button>\n    </>\n  );\n};\n","import { useEffect, useMemo, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Button } from \"../../../../common/components/Button/Button\";\nimport { ButtonsWrapper } from \"../../../../common/components/ButtonsWrapper/ButtonsWrapper\";\nimport { calculateShipCoords } from \"../../../../common/utils/calculateShipCoords/calculateShipCoords\";\nimport { checkIfShipIsNotSurroundedByAnotherShip } from \"../../../../common/utils/checkIfShipIsNotSurroundedByAnotherShip/checkIfShipIsNotSurroundedByAnotherShip\";\nimport { checkIfStartIndexShipCoordsDirectionIsNotOutOfBounds } from \"../../../../common/utils/checkIfStartIndexShipCoordsDirectionIsNotOutOfBounds/checkIfStartIndexShipCoordsDirectionIsNotOutOfBounds\";\nimport { createGameboard } from \"../../../../common/utils/createGameboard/createGameboard\";\nimport { createRandomGameboard } from \"../../../../common/utils/createRandomGameboard/createRandomGameboard\";\nimport { generateRandomValidShipPosition } from \"../../../../common/utils/generateRandomValidShipPosition/generateRandomValidShipPosition\";\nimport { getArrayWithArrayOfIndexValuesReplacedByNewValue } from '../../../../common/utils/getArrayWithArrayOfIndexValuesReplacedByNewValue/getArrayWithArrayOfIndexValuesReplacedByNewValue';\nimport { getFirstDigitOfNumber } from \"../../../../common/utils/getFirstDigitOfNumber/getFirstDigitOfNumber\";\nimport { getLastDigitOfNumber } from \"../../../../common/utils/getLastDigitOfNumber/getLastDigitOfNumber\";\nimport { getLastIdInRowTwoDimensionalArray } from \"../../../../common/utils/getLastIdInRowTwoDimensionalArray/getLastIdInRowTwoDimensionalArray\";\nimport { getRowNumberOfIndexTwoDimensionalArray } from \"../../../../common/utils/getRowNumberOfIndexTwoDimensionalArray/getRowNumberOfIndexTwoDimensionalArray\";\nimport { getToggleValue } from \"../../../../common/utils/getToggleValue/getToggleValue\";\nimport { getValidStartIdShipNotOutOfBounds } from \"../../../../common/utils/getValidStartIdShipNotOutOfBounds/getValidStartIdShipNotOutOfBounds\";\nimport { isEmptyGameboardCell } from \"../../../../common/utils/isEmptyGameboardCell/isEmptyGameboardCell\";\nimport { isValidShipPosition } from \"../../../../common/utils/isValidShipPosition/isValidShipPosition\";\nimport { replaceAllSpecificArrayValuesWithNewValue } from '../../../../common/utils/replaceAllSpecificArrayValuesWithNewValue/replaceAllSpecificArrayValuesWithNewValue';\nimport { sortArrayOfObjectsBasedOnAKeyValueByOrder } from \"../../../../common/utils/sortArrayOfObjectsBasedOnAKeyValueByOrder/sortArrayOfObjectsBasedOnAKeyValueByOrder\";\nimport {\n  handleStartGame,\n  selectAmountOfColumns,\n  selectAmountOfRows,\n  selectButtonNextStepText,\n  selectEmptyGameboardValue,\n  selectHorizontalDirectionValue,\n  selectIsPlayerTwoComputer,\n  selectPlayerOneName,\n  selectPlayerTwoName,\n  selectShipLengthPropertyText,\n  selectShipNamePropertyText,\n  selectShips,\n  selectVerticalDirectionValue,\n  updateGameboardPlayerOneInitialState,\n  updateGameboardPlayerTwoInitialState,\n  updateShowGameboards,\n  updateShowModalPreGameGameboardPlayerOneGridShipPlacement,\n  updateShowModalPreGameGameboardPlayerOneGridShipPlacementAgainstComputer,\n  updateShowModalPreGameGameboardPlayerTwoGridShipPlacement,\n  updateShowModalPreGameSwitchTurnToPlayerOne,\n  updateShowModalPreGameSwitchTurnToPlayerTwoGameboard\n} from \"../../gameSlice\";\nimport { GameButtonsShipPlacement } from \"../GameButtonsShipPlacement/GameButtonsShipPlacement\";\nimport './GameboardPlayerGridShipPlacement.scss';\n\nexport const GameboardPlayerGridShipPlacement = ({ isPlayerOne }) => {\n  const dispatch = useDispatch();\n  const amountOfColumns = useSelector(selectAmountOfColumns);\n  const amountOfRows = useSelector(selectAmountOfRows);\n  const buttonNextStepText = useSelector(selectButtonNextStepText);\n  const emptyGameboardValue = useSelector(selectEmptyGameboardValue);\n  const horizontalDirectionValue = useSelector(selectHorizontalDirectionValue);\n  const isPlayerTwoComputer = useSelector(selectIsPlayerTwoComputer);\n  const playerOneName = useSelector(selectPlayerOneName);\n  const playerTwoName = useSelector(selectPlayerTwoName);\n  const shipLengthPropertyText = useSelector(selectShipLengthPropertyText);\n  const shipNamePropertyText = useSelector(selectShipNamePropertyText);\n  const ships = useSelector(selectShips);\n  const verticalDirectionValue = useSelector(selectVerticalDirectionValue);\n\n  const gameboardPlayerShipPlacementInitialState = createGameboard(amountOfRows, amountOfColumns, emptyGameboardValue);\n  const [gameboardPlayerShipPlacement, setGameboardPlayerShipPlacement] = useState(gameboardPlayerShipPlacementInitialState);\n  const [shipPlacementDirection, setShipPlacementdirection] = useState(horizontalDirectionValue);\n  const [currentIndexShipToBePlaced, setCurrentIndexShipToBePlaced] = useState(0);\n  const [isAllShipsPlaced, setIsAllShipsPlaced] = useState(false);\n  const [hoveredIds, setHoveredIds] = useState([]);\n  \n  const sortedShipsLengthDescendingOrder = useMemo(() => sortArrayOfObjectsBasedOnAKeyValueByOrder(ships, shipLengthPropertyText, \"descending\"), [ships, shipLengthPropertyText]);\n\n  useEffect(() => {\n    if (currentIndexShipToBePlaced === (sortedShipsLengthDescendingOrder.length)) {\n      setIsAllShipsPlaced(true);\n    } else {\n      setIsAllShipsPlaced(false);\n    }\n  }, [currentIndexShipToBePlaced, sortedShipsLengthDescendingOrder]);\n\n  // scroll to bottom when all ships are placed to show the start game button\n  useEffect(() => {\n    if (isAllShipsPlaced && (currentIndexShipToBePlaced === sortedShipsLengthDescendingOrder.length)) {\n      window.scrollTo({top: document.body.scrollHeight, left: 0, behavior: 'smooth' });\n    };\n  }, [isAllShipsPlaced, currentIndexShipToBePlaced, sortedShipsLengthDescendingOrder, gameboardPlayerShipPlacement]);\n\n  const toggleShipPlacementDirection = () => {\n    const toggledShipPlacementDirectionValue = getToggleValue(shipPlacementDirection, horizontalDirectionValue, verticalDirectionValue);\n    setShipPlacementdirection(toggledShipPlacementDirectionValue);\n  };\n\n  const resetGameboardPlayerShipPlacement = () => {\n    setGameboardPlayerShipPlacement(gameboardPlayerShipPlacementInitialState);\n    setShipPlacementdirection(horizontalDirectionValue);\n    setCurrentIndexShipToBePlaced(0);\n  };\n\n  const removeLastShipPlacementFromGameboard = () => {\n    const removedLastShipPlacementFromGameboard = replaceAllSpecificArrayValuesWithNewValue(\n      gameboardPlayerShipPlacement, \n      sortedShipsLengthDescendingOrder[currentIndexShipToBePlaced - 1][shipNamePropertyText],\n      emptyGameboardValue\n    );\n    setGameboardPlayerShipPlacement(removedLastShipPlacementFromGameboard);\n  };\n  \n  const undoLastShipPlacement = () => {\n    if (currentIndexShipToBePlaced > 0) {\n      removeLastShipPlacementFromGameboard();\n      setCurrentIndexShipToBePlaced(currentIndexShipToBePlaced - 1);\n    };\n  };\n\n  const getAValidStartIdShipNotOutOfBounds = (id) => getValidStartIdShipNotOutOfBounds(\n    id,\n    getRowNumberOfIndexTwoDimensionalArray,\n    getFirstDigitOfNumber,\n    checkIfStartIndexShipCoordsDirectionIsNotOutOfBounds,\n    shipPlacementDirection,\n    horizontalDirectionValue,\n    getLastIdInRowTwoDimensionalArray,\n    amountOfRows,\n    amountOfColumns,\n    sortedShipsLengthDescendingOrder,\n    currentIndexShipToBePlaced,\n    verticalDirectionValue,\n    shipLengthPropertyText,\n    getLastDigitOfNumber\n  );\n  \n  const isAValidShipPlacement = (id, shipCoordsArray) => {\n    return (isValidShipPosition(\n      isEmptyGameboardCell(gameboardPlayerShipPlacement, id, emptyGameboardValue),\n      checkIfStartIndexShipCoordsDirectionIsNotOutOfBounds(id, sortedShipsLengthDescendingOrder[currentIndexShipToBePlaced], shipPlacementDirection, horizontalDirectionValue, verticalDirectionValue, shipLengthPropertyText, getFirstDigitOfNumber),\n      checkIfShipIsNotSurroundedByAnotherShip(gameboardPlayerShipPlacement, shipCoordsArray, emptyGameboardValue) \n    ));\n  };\n\n  const handleShipPlacementOnGameboard = (id) => {\n    const validStartIdShipNotOutOfBounds = getAValidStartIdShipNotOutOfBounds(id);\n    let shipCoordsShipPlacement = calculateShipCoords(sortedShipsLengthDescendingOrder[currentIndexShipToBePlaced][shipLengthPropertyText], validStartIdShipNotOutOfBounds, shipPlacementDirection, horizontalDirectionValue, verticalDirectionValue);\n    if (isAValidShipPlacement(validStartIdShipNotOutOfBounds, shipCoordsShipPlacement)) {\n      const gameboardPlayerShipPlacementWithPlacedShip = getArrayWithArrayOfIndexValuesReplacedByNewValue(gameboardPlayerShipPlacement, shipCoordsShipPlacement, sortedShipsLengthDescendingOrder[currentIndexShipToBePlaced][shipNamePropertyText]);\n      setGameboardPlayerShipPlacement(gameboardPlayerShipPlacementWithPlacedShip);\n      setHoveredIds([]);\n      setCurrentIndexShipToBePlaced(currentIndexShipToBePlaced + 1);\n    };\n  };\n\n  const handleOnMouseEnter = (id) => {\n    const validStartIdShipNotOutOfBounds = getAValidStartIdShipNotOutOfBounds(id);\n    const shipCoordsShipPlacement = calculateShipCoords(sortedShipsLengthDescendingOrder[currentIndexShipToBePlaced][shipLengthPropertyText], validStartIdShipNotOutOfBounds, shipPlacementDirection, horizontalDirectionValue, verticalDirectionValue);\n    setHoveredIds(shipCoordsShipPlacement);\n  };\n\n  const handleOnMouseLeave = () => {\n    setHoveredIds([]);\n  };\n\n  const randomizeGameboardPlayerShipPlacement = () => {\n    setGameboardPlayerShipPlacement(() => createRandomGameboard(amountOfRows, amountOfColumns, emptyGameboardValue, generateRandomValidShipPosition, ships, horizontalDirectionValue, verticalDirectionValue, shipNamePropertyText, shipLengthPropertyText, createRandomGameboard))\n    setCurrentIndexShipToBePlaced(sortedShipsLengthDescendingOrder.length);\n  };\n\n  const handleModalGameboardPlayerGridShipPlacement = () => {\n    if (isPlayerOne) {\n      dispatch(updateGameboardPlayerOneInitialState(gameboardPlayerShipPlacement));\n      if (isPlayerTwoComputer) {\n        dispatch(updateShowModalPreGameGameboardPlayerOneGridShipPlacementAgainstComputer(false));\n        dispatch(handleStartGame());\n        dispatch(updateShowGameboards(true));\n      } else {\n        dispatch(updateShowModalPreGameGameboardPlayerOneGridShipPlacement(false));\n        dispatch(updateShowModalPreGameSwitchTurnToPlayerTwoGameboard(true));\n      };\n    } else {\n      dispatch(updateGameboardPlayerTwoInitialState(gameboardPlayerShipPlacement));\n      dispatch(updateShowModalPreGameGameboardPlayerTwoGridShipPlacement(false));\n      dispatch(updateShowModalPreGameSwitchTurnToPlayerOne(true));\n    };\n  };\n\n  const isShipPlacementFinished = () => {\n    return (!((currentIndexShipToBePlaced < sortedShipsLengthDescendingOrder.length) && !isAllShipsPlaced));\n  };\n\n  return (\n    <div className=\"gameboard-player-grid-ship-placement\">\n      <h1 className=\"player-name-title\">{`${isPlayerOne ? playerOneName : playerTwoName}'s ship placements`}</h1>\n      <div className=\"game-buttons-ship-placement-wrapper\">\n        <ButtonsWrapper>\n          <GameButtonsShipPlacement\n            currentIndexShipToBePlaced={currentIndexShipToBePlaced}\n            isAllShipsPlaced={isAllShipsPlaced}\n            randomizeGameboardPlayerShipPlacement={randomizeGameboardPlayerShipPlacement}\n            resetGameboardPlayerShipPlacement={resetGameboardPlayerShipPlacement}\n            shipPlacementDirection={shipPlacementDirection}\n            toggleShipPlacementDirection={toggleShipPlacementDirection}\n            undoLastShipPlacement={undoLastShipPlacement}\n          />\n        </ButtonsWrapper>\n      </div>\n      <div className=\"ship-placement-message\">\n        {\n            !isShipPlacementFinished()\n          ? `Place ship ${sortedShipsLengthDescendingOrder[currentIndexShipToBePlaced][shipNamePropertyText]} with size ${sortedShipsLengthDescendingOrder[currentIndexShipToBePlaced][shipLengthPropertyText]}`\n          : \"All ships have been placed\"\n        }\n      </div>\n      <div className=\"gameboard-placement-wrapper\">\n        <div className=\"gameboard-wrapper\">\n          <div \n            className={`gameboard gameboard-player`}\n            style={{\n              gridTemplateColumns: `repeat(${amountOfColumns}, 1fr)`, \n              gridTemplateRows: `repeat(${amountOfRows}, auto)`,\n            }}\n            onMouseLeave={() => handleOnMouseLeave()}\n          >\n            {gameboardPlayerShipPlacement.map((cell, id) => (\n              <div \n                key={id} \n                id={id} \n                className={`gameboard-cell ${\n                      gameboardPlayerShipPlacement[id] === emptyGameboardValue\n                    ? \"empty\"\n                    : \"ship\"\n                  } ${\n                      (hoveredIds.indexOf(+id) > -1)\n                    ? isAValidShipPlacement(hoveredIds[0], hoveredIds)\n                    ? \"hovered-valid-ship-position\"\n                    : \"hovered-invalid-ship-position\"\n                    : \"\"\n                  }`\n                } \n                onClick={\n                    !isShipPlacementFinished()\n                  ? (() => handleShipPlacementOnGameboard(+id))\n                  : null\n                }\n                onMouseEnter={\n                    !isShipPlacementFinished()\n                  ? () => handleOnMouseEnter(+id)\n                  : null\n                }\n                onMouseLeave={() => handleOnMouseLeave}\n              >\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n      <Button \n        buttonOnClick={handleModalGameboardPlayerGridShipPlacement}\n        disableButton={isAllShipsPlaced ? false : true}\n      >\n        {\n          isPlayerTwoComputer\n          ? \"Start game\"\n          : buttonNextStepText\n        }\n      </Button>\n    </div>\n  );\n};\n","export const replaceAllSpecificArrayValuesWithNewValue = (array, value, newValue) => {\n  const copyArray = [...array];\n  for (let i = 0; i < copyArray.length; i++) {\n    if (copyArray[i] === value) {\n      copyArray[i] = newValue\n    }\n  }\n  return copyArray;\n};\n","export const getValidStartIdShipNotOutOfBounds = (\n  id,\n  getRowNumberOfIndexTwoDimensionalArray,\n  getFirstDigitOfNumber,\n  checkIfStartIndexShipCoordsDirectionIsNotOutOfBounds,\n  shipPlacementDirection,\n  horizontalDirectionValue,\n  getLastIdInRowTwoDimensionalArray,\n  amountOfRows,\n  amountOfColumns,\n  sortedShipsLengthDescendingOrder,\n  currentIndexShipToBePlaced,\n  verticalDirectionValue,\n  shipLengthPropertyText,\n  getLastDigitOfNumber\n) => {\n  const rowNumber = getRowNumberOfIndexTwoDimensionalArray(id, getFirstDigitOfNumber);\n  const currentShip = sortedShipsLengthDescendingOrder[currentIndexShipToBePlaced];\n  const lengthOfShip = currentShip[shipLengthPropertyText];\n  const isIdShipPlacementNotOutOfBounds = checkIfStartIndexShipCoordsDirectionIsNotOutOfBounds(id, currentShip, shipPlacementDirection, horizontalDirectionValue, verticalDirectionValue, shipLengthPropertyText, getFirstDigitOfNumber);\n\n  if (isIdShipPlacementNotOutOfBounds) {\n    return id;\n  } else if (shipPlacementDirection === horizontalDirectionValue) {\n    const lastIdInRow = getLastIdInRowTwoDimensionalArray(rowNumber, (amountOfColumns - 1));\n    const validStartIdShipNotOutOfBounds = (lastIdInRow - (lengthOfShip - 1));\n    return validStartIdShipNotOutOfBounds;\n  } else if (shipPlacementDirection === verticalDirectionValue) {\n    const columnNumber = getLastDigitOfNumber(id);\n    const validStartIdShipNotOutOfBounds = +(((amountOfRows - 1) - (lengthOfShip - 1)).toString() + columnNumber);\n    return  validStartIdShipNotOutOfBounds;\n  };\n};\n","export const getArrayWithArrayOfIndexValuesReplacedByNewValue = (array, arrayIndexValues, newValue) => {\n  let copyArray = [...array];\n  for (const coord of arrayIndexValues) {\n    copyArray[coord] = newValue;\n  }\n  return copyArray;\n};\n","export const getToggleValue = (currentValue, value1, value2) => {\n  if (currentValue === value1) {\n    return value2;\n  } else if (currentValue === value2) {\n    return value1;\n  }\n};\n","import { useDispatch, useSelector } from \"react-redux\";\nimport { Button } from \"../../../../common/components/Button/Button\";\nimport { ButtonsWrapper } from \"../../../../common/components/ButtonsWrapper/ButtonsWrapper\";\nimport { Modal } from \"../../../../common/components/Modal/Modal\";\nimport { ModalMessage } from \"../../../../common/components/ModalMessage/ModalMessage\";\nimport { capitalizeString } from \"../../../../common/utils/capitalizeString/capitalizeString\";\nimport { createRandomGameboard } from \"../../../../common/utils/createRandomGameboard/createRandomGameboard\";\nimport { generateRandomValidShipPosition } from \"../../../../common/utils/generateRandomValidShipPosition/generateRandomValidShipPosition\";\nimport { getGeneratedRandomGameboardPlayerInitialStates } from \"../../../../common/utils/getGeneratedRandomGameboardPlayerInitialStates/getGeneratedRandomGameboardPlayerInitialStates\";\nimport {\n  handleButtonNewGame,\n  handleModalGameSwitchTurnToPlayerOne,\n  handleModalGameSwitchTurnToPlayerTwo,\n  handleModalPickOpponentComputer,\n  handleModalPickOpponentPlayer,\n  handleModalPreGamePlayerOneName,\n  handleModalPreGamePlayerOneNameAgainstComputer,\n  handleModalPreGamePlayerTwoName,\n  handleModalPreGameSwitchToPlayerOneGameboard,\n  handleModalPreGameSwitchTurnToPlayerOne,\n  handleModalPreGameSwitchTurnToPlayerTwo,\n  selectAmountOfColumns,\n  selectAmountOfRows,\n  selectButtonNextStepText,\n  selectComputerName,\n  selectComputerWonGame,\n  selectEmptyGameboardValue,\n  selectHorizontalDirectionValue,\n  selectPlayerOneName,\n  selectPlayerOneWonGame,\n  selectPlayerTwoName,\n  selectPlayerTwoWonGame,\n  selectShipLengthPropertyText,\n  selectShipNamePropertyText,\n  selectShips,\n  selectShowModalGameOver,\n  selectShowModalGameSwitchTurnToPlayerOne,\n  selectShowModalGameSwitchTurnToPlayerTwo,\n  selectShowModalPickOpponent,\n  selectShowModalPreGameGameboardPlayerOneGridShipPlacement,\n  selectShowModalPreGameGameboardPlayerOneGridShipPlacementAgainstComputer,\n  selectShowModalPreGameGameboardPlayerTwoGridShipPlacement,\n  selectShowModalPreGamePlayerOneName,\n  selectShowModalPreGamePlayerOneNameAgainstComputer,\n  selectShowModalPreGamePlayerTwoName,\n  selectShowModalPreGameSwitchTurnToPlayerOne,\n  selectShowModalPreGameSwitchTurnToPlayerOneGameboard,\n  selectShowModalPreGameSwitchTurnToPlayerTwoGameboard,\n  selectVerticalDirectionValue,\n  updatePlayerOneName,\n  updatePlayerTwoName,\n  updateShowModalGameOver,\n  updateShowModalPickOpponent\n} from \"../../gameSlice\";\nimport { GameboardPlayerGridShipPlacement } from \"../GameboardPlayerGridShipPlacement/GameboardPlayerGridShipPlacement\";\nimport './GameLogicModals.scss';\n\nexport const GameLogicModals = () => {\n  const dispatch = useDispatch();\n  const amountOfColumns = useSelector(selectAmountOfColumns);\n  const amountOfRows = useSelector(selectAmountOfRows);\n  const buttonNextStepText = useSelector(selectButtonNextStepText);\n  const computerName = useSelector(selectComputerName);\n  const computerWonGame = useSelector(selectComputerWonGame);\n  const emptyGameboardValue = useSelector(selectEmptyGameboardValue);\n  const horizontalDirectionValue = useSelector(selectHorizontalDirectionValue);\n  const playerOneName = useSelector(selectPlayerOneName);\n  const playerOneWonGame = useSelector(selectPlayerOneWonGame);\n  const playerTwoName = useSelector(selectPlayerTwoName);\n  const playerTwoWonGame = useSelector(selectPlayerTwoWonGame);\n  const shipLengthPropertyText = useSelector(selectShipLengthPropertyText);\n  const shipNamePropertyText = useSelector(selectShipNamePropertyText);\n  const ships = useSelector(selectShips);\n  const showModalGameOver = useSelector(selectShowModalGameOver);\n  const showModalGameSwitchTurnToPlayerOne = useSelector(selectShowModalGameSwitchTurnToPlayerOne);\n  const showModalGameSwitchTurnToPlayerTwo  = useSelector(selectShowModalGameSwitchTurnToPlayerTwo);\n  const showModalPickOpponent = useSelector(selectShowModalPickOpponent);\n  const showModalPreGameGameboardPlayerOneGridShipPlacement = useSelector(selectShowModalPreGameGameboardPlayerOneGridShipPlacement);\n  const showModalPreGameGameboardPlayerOneGridShipPlacementAgainstComputer = useSelector(selectShowModalPreGameGameboardPlayerOneGridShipPlacementAgainstComputer);\n  const showModalPreGameGameboardPlayerTwoGridShipPlacement = useSelector(selectShowModalPreGameGameboardPlayerTwoGridShipPlacement);\n  const showModalPreGamePlayerOneName = useSelector(selectShowModalPreGamePlayerOneName);\n  const showModalPreGamePlayerOneNameAgainstComputer = useSelector(selectShowModalPreGamePlayerOneNameAgainstComputer);\n  const showModalPreGamePlayerTwoName = useSelector(selectShowModalPreGamePlayerTwoName);\n  const showModalPreGameSwitchTurnToPlayerOne = useSelector(selectShowModalPreGameSwitchTurnToPlayerOne);\n  const showModalPreGameSwitchTurnToPlayerOneGameboard = useSelector(selectShowModalPreGameSwitchTurnToPlayerOneGameboard);\n  const showModalPreGameSwitchTurnToPlayerTwoGameboard = useSelector(selectShowModalPreGameSwitchTurnToPlayerTwoGameboard);\n  const verticalDirectionValue = useSelector(selectVerticalDirectionValue);\n\n  const generatedRandomGameboardInitialStates = () => {\n    return (getGeneratedRandomGameboardPlayerInitialStates(\n      createRandomGameboard, \n      amountOfRows, \n      amountOfColumns,\n      emptyGameboardValue,\n      generateRandomValidShipPosition,\n      ships,\n      horizontalDirectionValue,\n      verticalDirectionValue,\n      shipNamePropertyText,\n      shipLengthPropertyText\n    ));\n  };\n\n  return (\n    <>\n      {\n          showModalGameOver\n        ? <Modal closeModal={() => dispatch(updateShowModalGameOver(false))}>\n            <ModalMessage>\n              {playerOneWonGame ? playerOneName : playerTwoWonGame ? playerTwoName : computerWonGame ? computerName : \"Noone\"} won!\n            </ModalMessage>\n            <ButtonsWrapper>\n              <Button buttonOnClick={() => dispatch(handleButtonNewGame())}>Play again</Button>\n            </ButtonsWrapper>\n          </Modal>\n        : null\n      }\n\n      {\n          showModalPickOpponent\n        ? <Modal closeModal={() => dispatch(updateShowModalPickOpponent(false))}>\n            <ModalMessage>\n              Pick your opponent\n            </ModalMessage>\n            <ButtonsWrapper>\n              <Button buttonOnClick={() => dispatch(handleModalPickOpponentComputer(generatedRandomGameboardInitialStates()))}>Computer</Button>\n              <Button buttonOnClick={() => dispatch(handleModalPickOpponentPlayer(generatedRandomGameboardInitialStates()))}>Player</Button>\n            </ButtonsWrapper>\n          </Modal>\n        : null\n      }\n\n      {\n          showModalPreGamePlayerOneNameAgainstComputer\n        ? \n          <Modal>\n            <ModalMessage>\n              <label htmlFor=\"player-name\">Player 1's name:</label>\n              <input \n                type=\"text\" \n                className=\"input-name\"\n                id=\"player-name\"\n                value={playerOneName}\n                onChange={(e) => dispatch(updatePlayerOneName(capitalizeString(e.target.value)))}\n                onKeyUp={(e) => ((e.key === \"Enter\") ? dispatch(handleModalPreGamePlayerOneNameAgainstComputer()) : null)}\n                autoFocus\n              />\n            </ModalMessage>\n            <ButtonsWrapper>\n              <Button \n                buttonOnClick={() => dispatch(handleModalPreGamePlayerOneNameAgainstComputer())}\n                disableButton={!playerOneName}\n              >\n                {buttonNextStepText}\n              </Button>\n            </ButtonsWrapper>\n          </Modal>\n        : null\n      }\n\n      {\n          showModalPreGameGameboardPlayerOneGridShipPlacementAgainstComputer\n        ?\n          <>\n            <GameboardPlayerGridShipPlacement isPlayerOne={true} />\n          </>\n        : null\n      }\n\n      {\n          showModalPreGamePlayerOneName\n        ? \n          <Modal>\n            <ModalMessage>\n              <label htmlFor=\"player-name\">Player 1's name:</label>\n              <input \n                type=\"text\" \n                className=\"input-name\"\n                id=\"player-name\"\n                value={playerOneName}\n                onChange={(e) => dispatch(updatePlayerOneName(capitalizeString(e.target.value)))}\n                onKeyUp={(e) => ((e.key === \"Enter\") ? dispatch(handleModalPreGamePlayerOneName()) : null)}\n                autoFocus\n              />\n            </ModalMessage>\n            <ButtonsWrapper>\n              <Button \n                buttonOnClick={() => dispatch(handleModalPreGamePlayerOneName())}\n                disableButton={!playerOneName}\n              >\n                {buttonNextStepText}\n              </Button>\n            </ButtonsWrapper>\n          </Modal>\n        : null\n      }\n\n      {\n          showModalPreGamePlayerTwoName\n        ? \n          <Modal>\n            <ModalMessage>\n              <label htmlFor=\"player-name\">Player 2's name:</label>\n              <input \n                type=\"text\" \n                className=\"input-name\"\n                id=\"player-name\"\n                value={playerTwoName}\n                onChange={(e) => dispatch(updatePlayerTwoName(capitalizeString(e.target.value)))}\n                onKeyUp={(e) => ((e.key === \"Enter\") ? dispatch(handleModalPreGamePlayerTwoName()) : null)}\n                autoFocus\n              />\n            </ModalMessage>\n            <ButtonsWrapper>\n              <Button \n                buttonOnClick={() => dispatch(handleModalPreGamePlayerTwoName())}\n                disableButton={!playerTwoName}\n              >\n                {buttonNextStepText}\n              </Button>\n            </ButtonsWrapper>\n          </Modal>\n        : null\n      }\n\n      {\n          showModalPreGameSwitchTurnToPlayerOneGameboard\n        ? \n          <Modal>\n            <ModalMessage>\n              Hand over to {playerOneName}\n            </ModalMessage>\n            <ButtonsWrapper>\n              <Button buttonOnClick={() => dispatch(handleModalPreGameSwitchToPlayerOneGameboard())}>{buttonNextStepText}</Button>\n            </ButtonsWrapper>\n          </Modal>\n        : null \n      }\n\n      {\n          showModalPreGameGameboardPlayerOneGridShipPlacement\n        ?\n          <>\n            <GameboardPlayerGridShipPlacement isPlayerOne={true} />\n          </>\n        : null\n      }\n\n      {\n          showModalPreGameSwitchTurnToPlayerTwoGameboard\n        ? <Modal>\n            <ModalMessage>\n              Hand over to {playerTwoName}\n            </ModalMessage>\n            <ButtonsWrapper>\n              <Button buttonOnClick={() => dispatch(handleModalPreGameSwitchTurnToPlayerTwo())}>{buttonNextStepText}</Button>\n            </ButtonsWrapper>\n          </Modal>\n        : null\n      }\n\n      {\n          showModalPreGameGameboardPlayerTwoGridShipPlacement\n        ?\n          <>\n            <GameboardPlayerGridShipPlacement isPlayerOne={false} />\n          </>\n        : null\n      }\n\n      {\n          showModalPreGameSwitchTurnToPlayerOne\n        ? <Modal>\n            <ModalMessage>\n              Hand over to {playerOneName}\n            </ModalMessage>\n            <ButtonsWrapper>\n              <Button buttonOnClick={() => dispatch(handleModalPreGameSwitchTurnToPlayerOne())}>Start game</Button>\n            </ButtonsWrapper>\n          </Modal>\n        : null\n      }\n\n      {\n          showModalGameSwitchTurnToPlayerTwo\n        ? <Modal>\n            <ModalMessage>\n              Hand over to {playerTwoName}\n            </ModalMessage>\n            <ButtonsWrapper>\n              <Button buttonOnClick={() => dispatch(handleModalGameSwitchTurnToPlayerTwo())}>Go</Button>\n            </ButtonsWrapper>\n          </Modal>\n        : null\n      }\n\n      {\n          showModalGameSwitchTurnToPlayerOne\n        ? <Modal>\n            <ModalMessage>\n              Hand over to {playerOneName}\n            </ModalMessage>\n            <ButtonsWrapper>\n              <Button buttonOnClick={() => dispatch(handleModalGameSwitchTurnToPlayerOne())}>Go</Button>\n            </ButtonsWrapper>\n          </Modal>\n        : null\n      }\n    </>\n  );\n};\n","import { useEffect, useLayoutEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { createRandomGameboard } from '../../common/utils/createRandomGameboard/createRandomGameboard';\nimport { generateRandomValidShipPosition } from '../../common/utils/generateRandomValidShipPosition/generateRandomValidShipPosition';\nimport { getArrayIndexValuesOfEmptyGameboardValuesAndHiddenShips } from '../../common/utils/getArrayIndexValuesOfEmptyGameboardValuesAndHiddenShips/getArrayIndexValuesOfEmptyGameboardValuesAndHiddenShips';\nimport { getAvailableNextSmartComputerMovesAfterHit } from '../../common/utils/getAvailableNextSmartComputerMovesAfterHit/getAvailableNextSmartComputerMovesAfterHit';\nimport { getAvailableRandomGameboardComputerCellNumber } from '../../common/utils/getAvailableRandomGameboardComputerCellNumber/getAvailableRandomGameboardComputerCellNumber';\nimport { getGeneratedRandomGameboardPlayerInitialStates } from '../../common/utils/getGeneratedRandomGameboardPlayerInitialStates/getGeneratedRandomGameboardPlayerInitialStates';\nimport { getPreviousHitDirectionNotSunkenShip } from '../../common/utils/getPreviousHitDirectionNotSunkenShip/getPreviousHitDirectionNotSunkenShip';\nimport { getRandomIndexFromArray } from '../../common/utils/getRandomIndexFromArray/getRandomIndexFromArray';\nimport { isShipOrEmptyGameboardValue } from '../../common/utils/isShipOrEmptyGameboardValue/isShipOrEmptyGameboardValue';\nimport { isValidComputerTurn } from '../../common/utils/isValidComputerTurn/isValidComputerTurn';\nimport { GameboardsWrapper } from './components/GameboardsWrapper/GameboardsWrapper';\nimport { GameLogicModals } from './components/GameLogicModals/GameLogicModals';\nimport './Game.scss';\nimport {\n  handleMove, handleNewGameAgainstComputerWithRandomGameboardInitialStates, selectAmountOfColumns, selectAmountOfRows, selectComputerHitTurnAgainCount, selectEmptyGameboardValue, selectFreemissGameboardValue, selectGameboardPlayerOne, selectGameboardPlayerOneInitialState,\n  selectGameboardPlayerTwoInitialState, selectHitGameboardValue, selectHorizontalDirectionValue, selectIsGameOver, selectIsGameStarted, selectIsPlayerOneTurn, selectIsPlayerTwoComputer, selectMissGameboardValue, selectPreviousHitComputerCellsNotSunkenShip,\n  selectPreviousHitDirectionNotSunkenShip, selectPreviousHitDirectionNotSunkenShipHorizontalValue,\n  selectPreviousHitDirectionNotSunkenShipVerticalValue, selectShipLengthPropertyText, selectShipNamePropertyText, selectShips, selectShowGameboards,\n  selectVerticalDirectionValue,\n  updateGameboardPlayerOne,\n  updateGameboardPlayerTwo,\n  updatePreviousHitDirectionNotSunkenShip\n} from './gameSlice';\n\nexport const Game = () => {\n  const dispatch = useDispatch();\n  const amountOfRows = useSelector(selectAmountOfRows);\n  const amountOfColumns = useSelector(selectAmountOfColumns);\n  const computerHitTurnAgainCount = useSelector(selectComputerHitTurnAgainCount);\n  const emptyGameboardValue = useSelector(selectEmptyGameboardValue);\n  const freemissGameboardValue = useSelector(selectFreemissGameboardValue);;\n  const gameboardPlayerOne = useSelector(selectGameboardPlayerOne);\n  const gameboardPlayerOneInitialState = useSelector(selectGameboardPlayerOneInitialState);\n  const gameboardPlayerTwoInitialState = useSelector(selectGameboardPlayerTwoInitialState);\n  const hitGameboardValue = useSelector(selectHitGameboardValue);\n  const horizontalDirectionValue = useSelector(selectHorizontalDirectionValue);\n  const isGameOver = useSelector(selectIsGameOver);\n  const isGameStarted = useSelector(selectIsGameStarted);\n  const isPlayerOneTurn = useSelector(selectIsPlayerOneTurn);\n  const isPlayerTwoComputer = useSelector(selectIsPlayerTwoComputer);\n  const missGameboardValue = useSelector(selectMissGameboardValue);\n  const previousHitComputerCellsNotSunkenShip = useSelector(selectPreviousHitComputerCellsNotSunkenShip)\n  const previousHitDirectionNotSunkenShip = useSelector(selectPreviousHitDirectionNotSunkenShip);\n  const previousHitDirectionNotSunkenShipHorizontalValue = useSelector(selectPreviousHitDirectionNotSunkenShipHorizontalValue);\n  const previousHitDirectionNotSunkenShipVerticalValue = useSelector(selectPreviousHitDirectionNotSunkenShipVerticalValue);\n  const shipLengthPropertyText = useSelector(selectShipLengthPropertyText);\n  const shipNamePropertyText = useSelector(selectShipNamePropertyText);\n  const ships = useSelector(selectShips);\n  const showGameboards = useSelector(selectShowGameboards);\n  const verticalDirectionValue = useSelector(selectVerticalDirectionValue);\n\n  // start a game against the computer with randomly generated initial gameboard states for the player and computer when a user visits the webpage\n  useEffect(() => {\n    dispatch(handleNewGameAgainstComputerWithRandomGameboardInitialStates(getGeneratedRandomGameboardPlayerInitialStates(\n      createRandomGameboard, \n      amountOfRows, \n      amountOfColumns,\n      emptyGameboardValue,\n      generateRandomValidShipPosition,\n      ships,\n      horizontalDirectionValue,\n      verticalDirectionValue,\n      shipNamePropertyText,\n      shipLengthPropertyText\n    )));\n  }, [dispatch, amountOfRows, amountOfColumns, emptyGameboardValue, ships, horizontalDirectionValue, verticalDirectionValue, shipNamePropertyText, shipLengthPropertyText]);\n\n  // scroll to top when the game started or finished\n  useLayoutEffect(() => {\n    window.scrollTo(0, 0);\n  }, [isGameStarted]);\n\n  useEffect(() => {\n    dispatch(updateGameboardPlayerOne(gameboardPlayerOneInitialState));\n  }, [dispatch, gameboardPlayerOneInitialState]);\n\n  useEffect(() => {\n    dispatch(updateGameboardPlayerTwo(gameboardPlayerTwoInitialState));\n  }, [dispatch, gameboardPlayerTwoInitialState]);\n\n  useEffect(() => {\n    if (isValidComputerTurn(isPlayerTwoComputer, isPlayerOneTurn, isGameStarted, isGameOver)) {\n      if (!computerHitTurnAgainCount) {\n        const computerTurnTimeout = setTimeout(() => {\n          handleComputerMove();\n        }, 500);\n        return () => clearTimeout(computerTurnTimeout);\n      };\n      // if the computer hits a ship increase the \"virtual thinking time\" for the next step\n      if (computerHitTurnAgainCount) {\n        const computerTurnTimeout = setTimeout(() => {\n          handleComputerMove();\n        }, 1000);\n        return () => clearTimeout(computerTurnTimeout);\n      };\n    };\n  });\n\n  useEffect(() => {\n    if (previousHitComputerCellsNotSunkenShip.length === 2 && !previousHitDirectionNotSunkenShip) {\n      const previousHitDirectionNotSunkenShipValue = getPreviousHitDirectionNotSunkenShip(\n        previousHitDirectionNotSunkenShipVerticalValue, \n        previousHitDirectionNotSunkenShipHorizontalValue,\n        previousHitComputerCellsNotSunkenShip,\n      );\n      dispatch(updatePreviousHitDirectionNotSunkenShip(previousHitDirectionNotSunkenShipValue));\n    }\n  }, [dispatch, previousHitComputerCellsNotSunkenShip, previousHitDirectionNotSunkenShip, previousHitDirectionNotSunkenShipHorizontalValue, previousHitDirectionNotSunkenShipVerticalValue]);\n\n  const handleComputerMove = () => {\n    if (previousHitComputerCellsNotSunkenShip.length === 0) {\n      const randomGameboardComputerCellNumber = getAvailableRandomGameboardComputerCellNumber(\n        getArrayIndexValuesOfEmptyGameboardValuesAndHiddenShips,\n        gameboardPlayerOne,\n        hitGameboardValue,\n        missGameboardValue,\n        freemissGameboardValue,\n        getRandomIndexFromArray,\n      );\n      dispatch(handleMove(+randomGameboardComputerCellNumber));\n    } else if (previousHitComputerCellsNotSunkenShip.length > 0) {\n      const availableNextSmartComputerMovesAfterHit = getAvailableNextSmartComputerMovesAfterHit(\n        gameboardPlayerOne,\n        previousHitComputerCellsNotSunkenShip,\n        previousHitDirectionNotSunkenShip,\n        hitGameboardValue,\n        missGameboardValue,\n        freemissGameboardValue,\n        previousHitDirectionNotSunkenShipHorizontalValue,\n        previousHitDirectionNotSunkenShipVerticalValue,\n        isShipOrEmptyGameboardValue\n      );\n      const availableNextSmartComputerMovesAfterHitRandomIndex = getRandomIndexFromArray(availableNextSmartComputerMovesAfterHit);\n      const smartComputerMoveIndex = availableNextSmartComputerMovesAfterHit[availableNextSmartComputerMovesAfterHitRandomIndex];\n      dispatch(handleMove(+smartComputerMoveIndex));\n    };\n  };\n\n  return (\n    <div className=\"game\">\n      {\n          showGameboards\n        ? \n          <GameboardsWrapper />\n        : null \n      }\n      <GameLogicModals />\n    </div>\n  );\n};\n","export const isValidComputerTurn = (\n  isPlayerTwoComputer,\n  isPlayerOneTurn,\n  isGameStarted,\n  isGameOver\n) => {\n  if (isPlayerTwoComputer && !isPlayerOneTurn && isGameStarted && !isGameOver) {\n    return true;\n  }\n  return false;\n};\n","export const getPreviousHitDirectionNotSunkenShip = (\n  previousHitDirectionNotSunkenShipVerticalValue,\n  previousHitDirectionNotSunkenShipHorizontalValue,\n  previousHitComputerCellsNotSunkenShip,\n) => {\n  let copyHitComputerCellNumbers = [...previousHitComputerCellsNotSunkenShip];\n  let copyHitComputerCellNumbersSortedAscending = copyHitComputerCellNumbers.sort((a, b) => (a - b));\n  if (copyHitComputerCellNumbersSortedAscending[0] === (copyHitComputerCellNumbersSortedAscending[1] - 10)) {\n    // ship is placed vertically\n    return (previousHitDirectionNotSunkenShipVerticalValue);\n  } else if (copyHitComputerCellNumbersSortedAscending[0] === (copyHitComputerCellNumbersSortedAscending[1] - 1)) {\n    // ship is placed horizontally\n    return (previousHitDirectionNotSunkenShipHorizontalValue);\n  }\n}\n","export const getAvailableRandomGameboardComputerCellNumber = (\n  getArrayIndexValuesOfEmptyGameboardValuesAndHiddenShips,\n  gameboardComputer,\n  hitGameboardValue,\n  missGameboardValue,\n  freemissGameboardValue,\n  getRandomIndexFromArray,\n) => {\n  // array of indexes of computercells that are either \"empty\" or a hidden ship\n  const gameboardComputerCellsAvailable = getArrayIndexValuesOfEmptyGameboardValuesAndHiddenShips(gameboardComputer, hitGameboardValue, missGameboardValue, freemissGameboardValue);\n  // pick a random index from the gameboardComputerCellsAvailable\n  const randomIndexGameboardComputerCellsAvailable = getRandomIndexFromArray(gameboardComputerCellsAvailable);\n  // random gameboardComputer cell value that gets picked with the random index\n  const randomGameboardComputerCellNumber = gameboardComputerCellsAvailable[randomIndexGameboardComputerCellsAvailable];\n  \n  return randomGameboardComputerCellNumber;\n}\n","export const getAvailableNextSmartComputerMovesAfterHit = (\n  gameboardComputer,\n  previousHitComputerCellsNotSunkenShip,\n  previousHitDirectionNotSunkenShip,\n  hitGameboardValue,\n  missGameboardValue,\n  freemissGameboardValue,\n  previousHitDirectionNotSunkenShipHorizontalValue,\n  previousHitDirectionNotSunkenShipVerticalValue,\n  isShipOrEmptyGameboardValue\n) => {\n  let copyGameboardComputer = [...gameboardComputer];\n  let availableNextSmartComputerMoves = [];\n  const indexesTop = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n  const indexesLeft = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90];\n  const indexesRight = [9, 19, 29, 39, 49, 59, 69, 79, 89, 99];\n  const indexesBottom = [90, 91, 92, 93, 94, 95, 96, 97, 98, 99];\n  \n  if (previousHitComputerCellsNotSunkenShip.length === 1) {\n    // search for available next computer moves top, right, bottom and left of the previousHitDirectionNotSunkenShip\n    const index = Math.min(...previousHitComputerCellsNotSunkenShip);\n\n    if ((indexesTop.indexOf(index) > -1)) {\n      // index is on the top border\n      if (isShipOrEmptyGameboardValue(copyGameboardComputer, (index + 10), hitGameboardValue, missGameboardValue, freemissGameboardValue)) {\n        availableNextSmartComputerMoves.push(index + 10);\n      }\n      if (index > indexesTop[0]) {\n        if (isShipOrEmptyGameboardValue(copyGameboardComputer, (index - 1), hitGameboardValue, missGameboardValue, freemissGameboardValue)) {\n          availableNextSmartComputerMoves.push(index - 1);\n        }\n      }\n      if (index < indexesTop[(indexesTop.length - 1)]) {\n        if (isShipOrEmptyGameboardValue(copyGameboardComputer, (index + 1), hitGameboardValue, missGameboardValue, freemissGameboardValue)) {\n          availableNextSmartComputerMoves.push(index + 1);\n        }\n      }\n    }\n\n    if ((indexesLeft.indexOf(index) > -1)) {\n      // index is on the left border\n      if (isShipOrEmptyGameboardValue(copyGameboardComputer, (index + 1), hitGameboardValue, missGameboardValue, freemissGameboardValue)) {\n        availableNextSmartComputerMoves.push(index + 1);\n      }\n      if (index > indexesLeft[0]) {\n        if (isShipOrEmptyGameboardValue(copyGameboardComputer, (index - 10), hitGameboardValue, missGameboardValue, freemissGameboardValue)) {\n          availableNextSmartComputerMoves.push(index - 10);\n        }\n      }\n      if (index < indexesLeft[(indexesLeft.length - 1)]) {\n        if (isShipOrEmptyGameboardValue(copyGameboardComputer, (index + 10), hitGameboardValue, missGameboardValue, freemissGameboardValue)) {\n          availableNextSmartComputerMoves.push(index + 10);\n        }\n      }\n    }\n\n    if ((indexesRight.indexOf(index) > -1)) {\n      // index is on the right border\n      if (isShipOrEmptyGameboardValue(copyGameboardComputer, (index - 1), hitGameboardValue, missGameboardValue, freemissGameboardValue)) {\n        availableNextSmartComputerMoves.push(index - 1);\n      }\n      if (index > indexesRight[0]) {\n        if (isShipOrEmptyGameboardValue(copyGameboardComputer, (index - 10), hitGameboardValue, missGameboardValue, freemissGameboardValue)) {\n          availableNextSmartComputerMoves.push(index - 10);\n        }\n      }\n      if (index < indexesRight[(indexesRight.length - 1)]) {\n        if (isShipOrEmptyGameboardValue(copyGameboardComputer, (index + 10), hitGameboardValue, missGameboardValue, freemissGameboardValue)) {\n          availableNextSmartComputerMoves.push(index + 10);\n        }\n      }\n    }\n\n    if ((indexesBottom.indexOf(index) > -1)) {\n      // index is on the bottom border\n      if (isShipOrEmptyGameboardValue(copyGameboardComputer, (index - 10), hitGameboardValue, missGameboardValue, freemissGameboardValue)) {\n        availableNextSmartComputerMoves.push(index - 10);\n      }\n      if (index > indexesBottom[0]) {\n        if (isShipOrEmptyGameboardValue(copyGameboardComputer, (index - 1), hitGameboardValue, missGameboardValue, freemissGameboardValue)) {\n          availableNextSmartComputerMoves.push(index - 1);\n        }\n      }\n      if (index < indexesBottom[(indexesBottom.length - 1)]) {\n        if (isShipOrEmptyGameboardValue(copyGameboardComputer, (index + 1), hitGameboardValue, missGameboardValue, freemissGameboardValue)) {\n          availableNextSmartComputerMoves.push(index + 1);\n        }\n      }\n    }\n\n    if ( !(indexesTop.indexOf(index) > -1) && !(indexesLeft.indexOf(index) > -1) && !(indexesRight.indexOf(index) > -1) && !((indexesBottom.indexOf(index) > -1))) {\n      // index isn't on the top, left, right or bottom border\n      if (isShipOrEmptyGameboardValue(copyGameboardComputer, (index - 10), hitGameboardValue, missGameboardValue, freemissGameboardValue)) {\n        availableNextSmartComputerMoves.push(index - 10);\n      }\n      if (isShipOrEmptyGameboardValue(copyGameboardComputer, (index - 1), hitGameboardValue, missGameboardValue, freemissGameboardValue)) {\n        availableNextSmartComputerMoves.push(index - 1);\n      }\n      if (isShipOrEmptyGameboardValue(copyGameboardComputer, (index + 1), hitGameboardValue, missGameboardValue, freemissGameboardValue)) {\n        availableNextSmartComputerMoves.push(index + 1);\n      }\n      if (isShipOrEmptyGameboardValue(copyGameboardComputer, (index + 10), hitGameboardValue, missGameboardValue, freemissGameboardValue)) {\n        availableNextSmartComputerMoves.push(index + 10);\n      }\n    }\n  }\n\n  \n  if (previousHitDirectionNotSunkenShip === previousHitDirectionNotSunkenShipHorizontalValue) {\n    // direction of ship that has been hit but isn't sunken yet is horizontal\n    const indexMin = Math.min(...previousHitComputerCellsNotSunkenShip);\n    const indexMax = Math.max(...previousHitComputerCellsNotSunkenShip);\n\n    if ((indexesLeft.indexOf(indexMin) > -1)) {\n      // indexMin is on the left border\n      if (isShipOrEmptyGameboardValue(copyGameboardComputer, (indexMax + 1), hitGameboardValue, missGameboardValue, freemissGameboardValue)) {\n        availableNextSmartComputerMoves.push(indexMax + 1);\n      }\n    }\n\n    if ((indexesRight.indexOf(indexMax) > -1)) {\n      // indexMax is on the right border\n      if (isShipOrEmptyGameboardValue(copyGameboardComputer, (indexMin - 1), hitGameboardValue, missGameboardValue, freemissGameboardValue)) {\n        availableNextSmartComputerMoves.push(indexMin - 1);\n      }\n    }\n\n    if (!(indexesLeft.indexOf(indexMin) > -1) && !(indexesRight.indexOf(indexMax) > -1)) {\n      // indexMin isn't on the left border and indexMax isn't on the right border\n      if (isShipOrEmptyGameboardValue(copyGameboardComputer, (indexMin - 1), hitGameboardValue, missGameboardValue, freemissGameboardValue)) {\n        availableNextSmartComputerMoves.push(indexMin - 1);\n      }\n      if (isShipOrEmptyGameboardValue(copyGameboardComputer, (indexMax + 1), hitGameboardValue, missGameboardValue, freemissGameboardValue)) {\n        availableNextSmartComputerMoves.push(indexMax + 1);\n      }\n    }\n  }\n\n  if (previousHitDirectionNotSunkenShip === previousHitDirectionNotSunkenShipVerticalValue) {\n    // direction of ship that has been hit but isn't sunken yet is horizontal\n    const indexMin = Math.min(...previousHitComputerCellsNotSunkenShip);\n    const indexMax = Math.max(...previousHitComputerCellsNotSunkenShip);\n\n    if ((indexesTop.indexOf(indexMin) > -1)) {\n      // indexMin is on the top border\n      if (isShipOrEmptyGameboardValue(copyGameboardComputer, (indexMax + 10), hitGameboardValue, missGameboardValue, freemissGameboardValue)) {\n        availableNextSmartComputerMoves.push(indexMax + 10);\n      }\n    }\n\n    if ((indexesBottom.indexOf(indexMax) > -1)) {\n      // indexMax is on the bottom border\n      if (isShipOrEmptyGameboardValue(copyGameboardComputer, (indexMin - 10), hitGameboardValue, missGameboardValue, freemissGameboardValue)) {\n        availableNextSmartComputerMoves.push(indexMin - 10);\n      }\n    }\n\n    if (!(indexesTop.indexOf(indexMin) > -1) && !(indexesBottom.indexOf(indexMax) > -1)) {\n      // indexMin isn't on the top border and indexMax isn't on the bottom border\n      if (isShipOrEmptyGameboardValue(copyGameboardComputer, (indexMin - 10), hitGameboardValue, missGameboardValue, freemissGameboardValue)) {\n        availableNextSmartComputerMoves.push(indexMin - 10);\n      }\n      if (isShipOrEmptyGameboardValue(copyGameboardComputer, (indexMax + 10), hitGameboardValue, missGameboardValue, freemissGameboardValue)) {\n        availableNextSmartComputerMoves.push(indexMax + 10);\n      }\n    }\n  }\n  \n  const sortedAvailableNextSmartComputerMoves = availableNextSmartComputerMoves.sort((a, b) => a - b);\n  const sortedUniqueAvailableNextSmartComputerMoves = [...new Set(sortedAvailableNextSmartComputerMoves)];\n\n  return sortedUniqueAvailableNextSmartComputerMoves;\n};\n","import React from 'react';\nimport './App.scss';\nimport { Game } from './features/game/Game';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Game />\n    </div>\n  );\n};\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport gameReducer from '../features/game/gameSlice';\n\nexport const store = configureStore({\n  reducer: {\n    game: gameReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport { store } from './app/store';\nimport './index.scss';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}